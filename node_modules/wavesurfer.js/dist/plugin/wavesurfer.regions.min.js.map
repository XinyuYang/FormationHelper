{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/./src/plugin/regions.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Region","params","ws","_this","this","_classCallCheck","wavesurfer","wrapper","drawer","util","style","id","getId","start","Number","end","scrollWidth","getDuration","resize","undefined","Boolean","drag","loop","color","data","attributes","maxLength","minLength","_onRedraw","updateRender","scroll","scrollParent","scrollSpeed","scrollThreshold","bindInOut","render","on","fireEvent","element","removeChild","un","play","_this2","once","playLoop","regionEl","document","createElement","attrname","className","title","formatTime","setAttribute","position","zIndex","height","top","handleLeft","appendChild","handleRight","css","cursor","left","width","maxWidth","bindEvents","map","time","Math","floor","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","max","min","round","regionWidth","backgroundColor","_this3","firedIn","firedOut","onProcess","backend","startTime","touchId","maxScroll","scrollDirection","wrapperRect","container","updated","onDown","onUp","onMove","_this4","addEventListener","e","preventDefault","stopPropagation","duration","touches","length","targetTouches","identifier","regions","getRegionSnapToGridValue","handleEvent","clientWidth","getBoundingClientRect","target","tagName","toLowerCase","classList","contains","preventClick","oldTime","delta","onDrag","onResize","regionRect","x","right","clientX","edgeScroll","scrollLeft","requestAnimationFrame","body","removeEventListener","maxEnd","update","direction","RegionsPlugin","_this5","getOwnPropertyNames","Observer","forEach","_onBackendCreated","region","add","list","_onReady","dragSelection","enableDragSelection","keys","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","_this6","_this7","remove","_this8","slop","pxMove","eventDown","eventUp","eventMove","startUpdate","endUpdate","_this9","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset"],"mappings":"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","file":"wavesurfer.regions.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"regions\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"regions\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"localhost:8080/dist/plugin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nclass Region {\n    constructor(params, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                  this.start +\n                  (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n\n        this.maxLength = params.maxLength;\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params) {\n        if (null != params.start) {\n            this.start = Number(params.start);\n        }\n        if (null != params.end) {\n            this.end = Number(params.end);\n        }\n        if (null != params.loop) {\n            this.loop = Boolean(params.loop);\n        }\n        if (null != params.color) {\n            this.color = params.color;\n        }\n        if (null != params.data) {\n            this.data = params.data;\n        }\n        if (null != params.resize) {\n            this.resize = Boolean(params.resize);\n        }\n        if (null != params.drag) {\n            this.drag = Boolean(params.drag);\n        }\n        if (null != params.maxLength) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (null != params.minLength) {\n            this.minLength = Number(params.minLength);\n        }\n        if (null != params.attributes) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /* Play the audio region. */\n    play() {\n        this.wavesurfer.play(this.start, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /* Play the region in loop. */\n    playLoop() {\n        this.play();\n        this.once('out', () => this.playLoop());\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        const regionEl = document.createElement('region');\n        regionEl.className = 'wavesurfer-region';\n        regionEl.title = this.formatTime(this.start, this.end);\n        regionEl.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            regionEl.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        const width = this.wrapper.scrollWidth;\n        this.style(regionEl, {\n            position: 'absolute',\n            zIndex: 2,\n            height: '100%',\n            top: '0px'\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            const handleLeft = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            const handleRight = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            handleLeft.className = 'wavesurfer-handle wavesurfer-handle-start';\n            handleRight.className = 'wavesurfer-handle wavesurfer-handle-end';\n            const css = {\n                cursor: 'col-resize',\n                position: 'absolute',\n                left: '0px',\n                top: '0px',\n                width: '1%',\n                maxWidth: '4px',\n                height: '100%'\n            };\n            this.style(handleLeft, css);\n            this.style(handleRight, css);\n            this.style(handleRight, {\n                left: '100%'\n            });\n        }\n\n        this.element = this.wrapper.appendChild(regionEl);\n        this.updateRender();\n        this.bindEvents(regionEl);\n    }\n\n    formatTime(start, end) {\n        return (start == end ? [start] : [start, end])\n            .map(time =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        var startLimited = this.start;\n        var endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = time => {\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (this.start >= Math.round(time * 100) / 100 ||\n                    this.end <= Math.round(time * 100) / 100)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && this.start <= time && this.end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                this.wavesurfer.play(this.start);\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        this.element.addEventListener('mouseenter', e => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', e => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', e => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', e => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        (this.drag || this.resize) &&\n            (() => {\n                const container = this.wavesurfer.drawer.container;\n                const scrollSpeed = this.scrollSpeed;\n                const scrollThreshold = this.scrollThreshold;\n                let startTime;\n                let touchId;\n                let drag;\n                let maxScroll;\n                let resize;\n                let updated = false;\n                let scrollDirection;\n                let wrapperRect;\n\n                // Scroll when the user is dragging within the threshold\n                const edgeScroll = e => {\n                    const duration = this.wavesurfer.getDuration();\n                    if (!scrollDirection || (!drag && !resize)) {\n                        return;\n                    }\n\n                    // Update scroll position\n                    let scrollLeft =\n                        this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n                    this.wrapper.scrollLeft = scrollLeft = Math.min(\n                        maxScroll,\n                        Math.max(0, scrollLeft)\n                    );\n\n                    // Get the currently selected time according to the mouse position\n                    const time = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                        this.wavesurfer.drawer.handleEvent(e) * duration\n                    );\n                    const delta = time - startTime;\n                    startTime = time;\n\n                    // Continue dragging or resizing\n                    drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n                    // Repeat\n                    window.requestAnimationFrame(() => {\n                        edgeScroll(e);\n                    });\n                };\n\n                const onDown = e => {\n                    const duration = this.wavesurfer.getDuration();\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n                    touchId = e.targetTouches\n                        ? e.targetTouches[0].identifier\n                        : null;\n\n                    // stop the event propagation, if this region is resizable or draggable\n                    // and the event is therefore handled here.\n                    if (this.drag || this.resize) {\n                        e.stopPropagation();\n                    }\n\n                    // Store the selected startTime we begun dragging or resizing\n                    startTime = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                        this.wavesurfer.drawer.handleEvent(e, true) * duration\n                    );\n\n                    // Store for scroll calculations\n                    maxScroll =\n                        this.wrapper.scrollWidth - this.wrapper.clientWidth;\n                    wrapperRect = this.wrapper.getBoundingClientRect();\n\n                    if (e.target.tagName.toLowerCase() == 'handle') {\n                        if (\n                            e.target.classList.contains(\n                                'wavesurfer-handle-start'\n                            )\n                        ) {\n                            resize = 'start';\n                        } else {\n                            resize = 'end';\n                        }\n                    } else {\n                        drag = true;\n                        resize = false;\n                    }\n                };\n                const onUp = e => {\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n\n                    if (drag || resize) {\n                        drag = false;\n                        scrollDirection = null;\n                        resize = false;\n                    }\n\n                    if (updated) {\n                        updated = false;\n                        this.util.preventClick();\n                        this.fireEvent('update-end', e);\n                        this.wavesurfer.fireEvent('region-update-end', this, e);\n                    }\n                };\n                const onMove = e => {\n                    const duration = this.wavesurfer.getDuration();\n\n                    if (e.touches && e.touches.length > 1) {\n                        return;\n                    }\n                    if (\n                        e.targetTouches &&\n                        e.targetTouches[0].identifier != touchId\n                    ) {\n                        return;\n                    }\n\n                    if (drag || resize) {\n                        const oldTime = startTime;\n                        const time = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                            this.wavesurfer.drawer.handleEvent(e) * duration\n                        );\n\n                        const delta = time - startTime;\n                        startTime = time;\n\n                        // Drag\n                        if (this.drag && drag) {\n                            updated = updated || !!delta;\n                            this.onDrag(delta);\n                        }\n\n                        // Resize\n                        if (this.resize && resize) {\n                            updated = updated || !!delta;\n                            this.onResize(delta, resize);\n                        }\n\n                        if (\n                            this.scroll &&\n                            container.clientWidth < this.wrapper.scrollWidth\n                        ) {\n                            if (drag) {\n                                // The threshold is not between the mouse and the container edge\n                                // but is between the region and the container edge\n                                const regionRect = this.element.getBoundingClientRect();\n                                let x = regionRect.left - wrapperRect.left;\n\n                                // Check direction\n                                if (time < oldTime && x >= 0) {\n                                    scrollDirection = -1;\n                                } else if (\n                                    time > oldTime &&\n                                    x + regionRect.width <= wrapperRect.right\n                                ) {\n                                    scrollDirection = 1;\n                                }\n\n                                // Check that we are still beyond the threshold\n                                if (\n                                    (scrollDirection === -1 &&\n                                        x > scrollThreshold) ||\n                                    (scrollDirection === 1 &&\n                                        x + regionRect.width <\n                                            wrapperRect.right - scrollThreshold)\n                                ) {\n                                    scrollDirection = null;\n                                }\n                            } else {\n                                // Mouse based threshold\n                                let x = e.clientX - wrapperRect.left;\n\n                                // Check direction\n                                if (x <= scrollThreshold) {\n                                    scrollDirection = -1;\n                                } else if (\n                                    x >=\n                                    wrapperRect.right - scrollThreshold\n                                ) {\n                                    scrollDirection = 1;\n                                } else {\n                                    scrollDirection = null;\n                                }\n                            }\n\n                            scrollDirection && edgeScroll(e);\n                        }\n                    }\n                };\n\n                this.element.addEventListener('mousedown', onDown);\n                this.element.addEventListener('touchstart', onDown);\n\n                this.wrapper.addEventListener('mousemove', onMove);\n                this.wrapper.addEventListener('touchmove', onMove);\n\n                document.body.addEventListener('mouseup', onUp);\n                document.body.addEventListener('touchend', onUp);\n\n                this.on('remove', () => {\n                    document.body.removeEventListener('mouseup', onUp);\n                    document.body.removeEventListener('touchend', onUp);\n                    this.wrapper.removeEventListener('mousemove', onMove);\n                    this.wrapper.removeEventListener('touchmove', onMove);\n                });\n\n                this.wavesurfer.on('destroy', () => {\n                    document.body.removeEventListener('mouseup', onUp);\n                    document.body.removeEventListener('touchend', onUp);\n                });\n            })();\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd || this.start + delta < 0) {\n            return;\n        }\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        });\n    }\n\n    onResize(delta, direction) {\n        if (direction == 'start') {\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            });\n        } else {\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            });\n        }\n    }\n}\n\n/**\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('regions')`\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n */\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n        this.util.getRegionSnapToGridValue = value => {\n            return this.getRegionSnapToGridValue(value, params);\n        };\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        const region = new this.wavesurfer.Region(params, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            wrapperRect = this.wrapper.getBoundingClientRect();\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n        });\n\n        const eventMove = e => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            if (!region) {\n                region = this.add(params || {});\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = e.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(e);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n"],"sourceRoot":""}