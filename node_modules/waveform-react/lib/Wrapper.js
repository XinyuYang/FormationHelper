'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Position = require('./Position');

var _Position2 = _interopRequireDefault(_Position);

var _Waveform = require('./Waveform');

var _Waveform2 = _interopRequireDefault(_Waveform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Wrapper = function (_React$Component) {
  _inherits(Wrapper, _React$Component);

  function Wrapper() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Wrapper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      dragging: false,
      height: _this.props.height,
      resizing: null,
      width: _this.props.width
    }, _this.getDimensions = function () {
      clearTimeout(_this.state.resizing);
      var resizing = setTimeout(function () {
        var height = _this.getHeight(_this.props, _this.wrapper);
        var width = _this.getWidth(_this.props, _this.wrapper);
        if (height !== _this.state.height || width !== _this.state.width) {
          _this.setState({
            height: height,
            width: width
          });
        }
      }, 200);
      _this.setState({
        resizing: resizing
      });
    }, _this.getMousePosition = function (e) {
      var x = e.nativeEvent.offsetX;
      if (e.nativeEvent.target.id === 'posMarker') {
        return x + _this.props.position * _this.wrapper.offsetWidth;
      }
      return x;
    }, _this.handleMouseDown = function (e) {
      _this.setState({ dragging: true });
      if (_this.props.onPositionChange) {
        _this.props.onPositionChange(_this.getMousePosition(e) / _this.wrapper.offsetWidth);
      }
    }, _this.handleMouseMove = function (e) {
      if (_this.state.dragging && _this.props.onPositionChange) {
        _this.props.onPositionChange(_this.getMousePosition(e) / _this.wrapper.offsetWidth);
      }
    }, _this.handleMouseUp = function (e) {
      _this.setState({ dragging: false });
      if (_this.props.onPositionChange) {
        _this.props.onPositionChange(_this.getMousePosition(e) / _this.wrapper.offsetWidth);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Wrapper, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.responsive) {
        window.addEventListener('resize', this.getDimensions, false);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(next) {
      if (next.height !== this.props.height || next.width !== this.props.width || !next.height || !next.width) {
        var height = this.getHeight(next, this.wrapper);
        var width = this.getWidth(next, this.wrapper);
        this.setState({ height: height, width: width }, this.getDimensions);
      }
      if (next.responsive !== this.props.responsive) {
        if (next.responsive) {
          window.addEventListener('resize', this.getDimensions, false);
        } else {
          window.removeEventListener('resize', this.getDimensions);
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.getDimensions);
    }
  }, {
    key: 'getHeight',
    value: function getHeight(props, wrapper) {
      return props.responsive ? wrapper.offsetHeight : props.height;
    }
  }, {
    key: 'getWidth',
    value: function getWidth(props, wrapper) {
      return props.responsive ? wrapper.offsetWidth : props.width;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          buffer = _props.buffer,
          markerStyle = _props.markerStyle,
          position = _props.position,
          responsive = _props.responsive,
          showPosition = _props.showPosition,
          waveStyle = _props.waveStyle;

      return _react2.default.createElement(
        'div',
        {
          onMouseDown: this.handleMouseDown,
          onMouseMove: this.handleMouseMove,
          onMouseUp: this.handleMouseUp,
          ref: function ref(wrapper) {
            return _this2.wrapper = wrapper;
          },
          style: {
            height: responsive ? '100%' : this.props.height + 'px',
            position: 'relative',
            width: responsive ? '100%' : this.props.width + 'px'
          }
        },
        _react2.default.createElement(_Waveform2.default, {
          buffer: buffer,
          height: this.state.height,
          waveStyle: waveStyle,
          width: this.state.width
        }),
        showPosition && buffer && _react2.default.createElement(_Position2.default, {
          id: 'posMarker',
          markerStyle: markerStyle,
          position: position
        })
      );
    }
  }]);

  return Wrapper;
}(_react2.default.Component);

Wrapper.propTypes = {
  buffer: _propTypes2.default.object,
  height: _propTypes2.default.number,
  markerStyle: _propTypes2.default.shape({
    color: _propTypes2.default.string,
    width: _propTypes2.default.number
  }),
  onPositionChange: _propTypes2.default.func,
  position: _propTypes2.default.number,
  responsive: _propTypes2.default.bool,
  showPosition: _propTypes2.default.bool,
  waveStyle: _propTypes2.default.shape({
    animate: _propTypes2.default.bool,
    color: _propTypes2.default.string,
    pointWidth: _propTypes2.default.number
  }),
  width: _propTypes2.default.number
};

exports.default = Wrapper;