{"version":3,"sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/util/ajax.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/extend.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/peakcache.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_ajax","_interopRequireDefault","_getId","_max","_min","_observer","_extend","_style","_requestAnimationFrame","_frame","_debounce","_preventClick","_fetch","Observer","_classCallCheck","this","handlers","event","fn","_this","push","callback","un","e","length","splice","handler","_this2","on","_len","arguments","args","Array","_key","apply","setTimeout","_len2","_key2","forEach","prefix","undefined","Math","random","toString","substring","el","styles","keys","prop","style","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","element","util","_interopRequireWildcard","PLAYING","PAUSED","FINISHED","WebAudio","params","_this$stateBehaviors","_this$states","_possibleConstructorReturn","_getPrototypeOf","audioContext","offlineAudioContext","stateBehaviors","_defineProperty","init","addOnAudioProcess","getPlayedPercents","duration","getDuration","getCurrentTime","startPosition","getPlayedTime","removeOnAudioProcess","fireEvent","ac","supportsWebAudio","getAudioContext","lastPlay","currentTime","scheduledPause","states","analyser","buffer","filters","gainNode","mergedPeaks","offlineAc","peaks","playbackRate","scriptNode","source","splitPeaks","state","explicitDuration","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","createVolumeNode","createScriptNode","createAnalyserNode","setState","setPlaybackRate","audioRate","setLength","filter","disconnect","connect","setFilters","disconnectFilters","reduce","prev","curr","audioScriptProcessor","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","time","pause","createAnalyser","createGain","createGainNode","deviceId","audio","Audio","setSinkId","Promise","reject","Error","autoplay","dest","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","arraybuffer","errback","getOfflineAudioContext","decodeAudioData","data","channels","numberOfChannels","first","last","splitChannels","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","start","end","min","max","j","isPaused","unAll","disconnectSource","closeAudioContext","close","createSource","createBufferSource","noteGrainOn","stop","noteOff","adjustedTime","seekTo","resume","play","_drawer","_webaudio","_mediaelement","_peakcache","WaveSurfer","defaultParams","autoCenter","backend","backgroundColor","barHeight","barGap","container","cursorColor","cursorWidth","dragSelection","fillParent","forceDecode","height","hideScrollbar","interact","loopSelection","maxCanvasWidth","mediaContainer","mediaControls","mediaType","minPxPerSec","normalize","partialRender","pixelRatio","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","progressColor","removeMediaElementOnDestroy","renderer","MultiCanvas","responsive","rtl","scrollParent","skipLength","waveColor","xhr","backends","MediaElement","extend","document","querySelector","transform","setBackgroundColor","savedVolume","isMuted","tmpEvents","currentRequest","drawer","peakCache","Drawer","Backend","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","wrapper","clientWidth","_assertThisInitialized","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","_this3","instance","concat","staticProps","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","destroy","_this4","_this5","addEventListener","drawBuffer","progress","_this6","newVolume","getVolume","PeakCache","seconds","_this7","skip","offset","position","seekAndCenter","recenter","_this8","isFinite","paused","oldScrollParent","setVolume","rate","getPlaybackRate","setMute","mute","color","background","updateCursor","setHeight","nominalWidth","round","parentWidth","getWidth","width","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","_this9","decodeArrayBuffer","loadDecodedBuffer","load","blob","_this10","reader","FileReader","onProgress","loadArrayBuffer","target","result","readAsArrayBuffer","empty","url","preload","preloadIgnoreReasons","Preload is not 'auto', 'none' or 'metadata'","indexOf","Peaks are not provided","Backend is not of type MediaElement","Url is not of type string","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","_this11","action","once","getArrayBuffer","setPeaks","urlOrElt","_this12","elt","loadElt","src","err","_this13","_this14","options","responseType","request","fetchFile","message","percentComplete","lengthComputable","loaded","total","accuracy","noWindow","arr","map","val","json","JSON","stringify","open","encodeURIComponent","format","quality","type","getImage","controller","abort","cancelAjax","clearTmpEvents","setWidth","destroyAllPlugins","removeEventListener","VERSION","__VERSION__","XMLHttpRequest","fired100","method","requestHeaders","header","setRequestHeader","withCredentials","status","response","send","values","largest","Infinity","smallest","Number","sources","func","default","wait","immediate","timeout","context","timestamp","later","Date","now","debounced","callNow","clear","clearTimeout","flush","preventClickHandler","stopPropagation","body","fetchHeaders","Headers","fetchRequest","Request","AbortController","append","fetchOptions","headers","credentials","cache","redirect","referrer","signal","fetch","then","progressAvailable","contentLength","Response","ReadableStream","ProgressHandler","errMsg","ok","arrayBuffer","text","catch","error","_reader","getReader","parseInt","read","_ref","done","byteLength","enqueue","_drawer2","maxCanvasElementWidth","hasProgressCanvas","halfPixel","canvases","progressWave","EntryClass","CanvasEntry","overlap","ceil","createWrapper","createElements","appendChild","createElement","zIndex","left","top","bottom","overflow","display","boxSizing","borderRightStyle","pointerEvents","addCanvas","borderRightWidth","borderRightColor","totalWidth","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","updateDimensions","clearWave","leftOffset","initWave","initProgress","lastEntry","wave","parentElement","removeChild","pop","elementWidth","channelIndex","prepareDraw","absmax","hasMinVals","offsetY","halfH","peakIndexScale","bar","barWidth","step","scale","peak","floor","h","fillRect","_ref2","reflectedPeaks","len","drawLine","setFillStyles","drawLines","x","y","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRects","frame","channelPeaks","some","all","images","lastPos","userSelect","webkitUserSelect","overflowX","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","right","scrollLeft","scrollWidth","scrollbarHeight","offsetHeight","clientHeight","clientY","handleEvent","drawBars","drawWave","percent","recenterOnPosition","half","maxScroll","updateSize","minPxDelta","pos","newPos","updateProgress","parentNode","waveCtx","progressCtx","id","constructor","toLowerCase","getContext","offsetLeft","elementSize","clearRect","canvas","fillStyle","fillRectToContext","ctx","drawLineToContext","canvasStart","canvasEnd","halfOffset","absmaxHalf","beginPath","moveTo","lineTo","closePath","fill","resolve","toBlob","toDataURL","media","volume","elementPosition","onPlayEnd","createTimer","onAudioProcess","controls","prevMedia","_load","muted","seekable","clearPlayEnd","promise","setPlayEnd","_onPlayEnd","_get","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","sort","a","b","uncachedRangePairs","peakCacheRangePairs"],"mappings":"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","file":"wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","export { default as ajax } from './ajax';\nexport { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as Observer } from './observer';\nexport { default as extend } from './extend';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers) {\n            return;\n        }\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** @private */\n    static scriptBufferSize = 256;\n    /** @private */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private  */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.analyser = null;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** @private */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.analyser = null;\n        /** @private */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n\n    /** @private */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {};\n    }\n\n    /** @private */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     * @private\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            let audio = new window.Audio();\n            if (!audio.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            audio.autoplay = true;\n            var dest = this.ac.createMediaStreamDestination();\n            this.gainNode.disconnect();\n            this.gainNode.connect(dest);\n            audio.srcObject = dest.stream;\n\n            return audio.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        this.offlineAc.decodeAudioData(\n            arraybuffer,\n            data => callback(data),\n            errback\n        );\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                let min = 0;\n                let max = 0;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start, end - start);\n\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform around the progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for\n * unsupported browsers.\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement`)\n * `'audio'|'video'`\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     headers: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barGap: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = util.extend({}, this.defaultParams, params);\n\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            util.style(this.container, { transform: 'rotateY(180deg)' });\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    this.drawer.fireEvent('redraw');\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            this.params.backend == 'WebAudio' &&\n            !this.Backend.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement backend\n        if (this.params.backend === 'MediaElement') {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const paused = this.backend.isPaused();\n        // avoid draw wrong position while playing backward seeking\n        if (!paused) {\n            this.backend.pause();\n        }\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (!paused) {\n            this.backend.play();\n        }\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (mute) {\n            // If currently not muted then save current volume,\n            // turn off the volume and update the mute properties\n            this.savedVolume = this.backend.getVolume();\n            this.backend.setVolume(0);\n            this.isMuted = true;\n            this.fireEvent('volume', 0);\n        } else {\n            // If currently muted then restore to the saved volume\n            // and update the mute properties\n            this.backend.setVolume(this.savedVolume);\n            this.isMuted = false;\n            this.fireEvent('volume', this.savedVolume);\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getWaveColor() {\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color) {\n        this.params.waveColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @return {string} A CSS color string.\n     */\n    getProgressColor() {\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color) {\n        this.params.progressColor = color;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.fireEvent('ready');\n        this.isReady = true;\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        this.empty();\n\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                'Backend is not of type MediaElement':\n                    this.params.backend !== 'MediaElement',\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                this.drawBuffer();\n                this.fireEvent('ready');\n                this.isReady = true;\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If no pre-decoded peaks provided or pre-decoded peaks are\n        // provided with forceDecode flag, attempt to download the\n        // audio file and decode it with Web Audio.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n        }\n\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            data => {\n                // Only use the decoded data if we haven't been destroyed or\n                // another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            },\n            () => this.fireEvent('error', 'Error decoding audiobuffer')\n        );\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = util.extend(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', 'fetch error: ' + e.message);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks. (Integer)\n     * @param {number} accuracy=10000 (Integer)\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @todo Update exportPCM to work with new getPeaks signature\n     * @return {string} JSON of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n        const json = JSON.stringify(arr);\n        if (!noWindow) {\n            window.open(\n                'data:application/json;charset=utf-8,' +\n                    encodeURIComponent(json)\n            );\n        }\n        return json;\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        this.backend.destroy();\n        this.drawer.destroy();\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import Observer from './observer';\n\n/**\n * Perform an ajax request using `XMLHttpRequest`.\n *\n * @deprecated Use `util.fetchFile` instead.\n *\n * @param {Object} options AJAX options to use. See example below for options.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     method: 'GET',\n *     url: undefined,\n *     responseType: 'json',\n *     xhr: {}\n * };\n *\n * // override default options\n * options.url = '../media/demo.wav';\n * options.responseType = 'arraybuffer';\n * options.xhr = {\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ],\n *     withCredentials: true\n * };\n *\n * // make ajax call\n * let ajaxCall = util.ajax(options);\n * ajaxCall.on('progress', e => {\n *     console.log('progress', e);\n * });\n * ajaxCall.on('success', (data, e) => {\n *     console.log('success!', data);\n * });\n * ajaxCall.on('error', e => {\n *     console.warn('ajax error: ' + e.target.statusText);\n * });\n */\nexport default function ajax(options) {\n    const instance = new Observer();\n    const xhr = new XMLHttpRequest();\n    let fired100 = false;\n    xhr.open(options.method || 'GET', options.url, true);\n    xhr.responseType = options.responseType || 'json';\n\n    if (options.xhr) {\n        if (options.xhr.requestHeaders) {\n            // add custom request headers\n            options.xhr.requestHeaders.forEach(header => {\n                xhr.setRequestHeader(header.key, header.value);\n            });\n        }\n        if (options.xhr.withCredentials) {\n            // use credentials\n            xhr.withCredentials = true;\n        }\n    }\n\n    xhr.addEventListener('progress', e => {\n        instance.fireEvent('progress', e);\n        if (e.lengthComputable && e.loaded == e.total) {\n            fired100 = true;\n        }\n    });\n    xhr.addEventListener('load', e => {\n        if (!fired100) {\n            instance.fireEvent('progress', e);\n        }\n        instance.fireEvent('load', e);\n        if (200 == xhr.status || 206 == xhr.status) {\n            instance.fireEvent('success', xhr.response, e);\n        } else {\n            instance.fireEvent('error', e);\n        }\n    });\n    xhr.addEventListener('error', e => instance.fireEvent('error', e));\n    xhr.send();\n    instance.xhr = xhr;\n    return instance;\n}\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/**\n * Extend an object shallowly with others\n *\n * @param {Object} dest The target object\n * @param {Object[]} sources The objects to use for extending\n *\n * @return {Object} Merged object\n */\nexport default function extend(dest, ...sources) {\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            dest[key] = source[key];\n        });\n    });\n    return dest;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @private\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @private\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     * @private\n     */\n    createElements() {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 3,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                pointerEvents: 'none'\n            })\n        );\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     * @private\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        entry.initWave(\n            this.wrapper.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    zIndex: 2,\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%',\n                    pointerEvents: 'none'\n                })\n            )\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            entry.initProgress(\n                this.progressWave.appendChild(\n                    this.style(document.createElement('canvas'), {\n                        position: 'absolute',\n                        left: leftOffset + 'px',\n                        top: 0,\n                        bottom: 0,\n                        height: '100%'\n                    })\n                )\n            );\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     * @private\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        this.canvases.forEach(entry => entry.clearWave());\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                              this.params.pixelRatio,\n                              this.params.barGap * this.params.pixelRatio\n                          );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let i = first;\n\n                for (i; i < last; i += step) {\n                    const peak =\n                        peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                    const h = Math.round((peak / absmax) * halfH);\n                    this.fillRect(\n                        i + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @private\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end) {\n        this.canvases.forEach(entry => {\n            this.setFillStyles(entry);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     */\n    fillRect(x, y, width, height) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1\n                );\n            }\n        }\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @private\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n                if (this.params.splitChannels) {\n                    this.setHeight(\n                        channels.length *\n                            this.params.height *\n                            this.params.pixelRatio\n                    );\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn)\n                    );\n                }\n                peaks = channels[0];\n            }\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                const max = util.max(peaks);\n                const min = util.min(peaks);\n                absmax = -min > max ? -min : max;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const offsetY = height * channelIndex || 0;\n            const halfH = height / 2;\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @private\n     * @param {CanvasEntry} entry Target entry\n     */\n    setFillStyles(entry) {\n        entry.setFillStyles(this.params.waveColor, this.params.progressColor);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n        /** @private */\n        this.container = container;\n        /**\n         * @type {WavesurferParams}\n         * @private\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n        /** @private */\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = e.targetTouches\n            ? e.targetTouches[0].clientX\n            : e.clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress =\n                (this.params.rtl ? bbox.right - clientX : clientX - bbox.left) *\n                    (this.params.pixelRatio / nominalWidth) || 0;\n\n            if (progress > 1) {\n                progress = 1;\n            }\n        } else {\n            progress =\n                ((this.params.rtl\n                    ? bbox.right - clientX\n                    : clientX - bbox.left) +\n                    this.wrapper.scrollLeft) /\n                    this.wrapper.scrollWidth || 0;\n        }\n\n        return progress;\n    }\n\n    /**\n     * @private\n     */\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const scrollbarHeight =\n                this.wrapper.offsetHeight - this.wrapper.clientHeight;\n            if (scrollbarHeight != 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // we'll limit the \"re-center\" rate.\n            const rate = 5;\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(newPos);\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container) {\n                this.container.removeChild(this.wrapper);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         * @private\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(this.constructor.name.toLowerCase() + '_');\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d');\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext('2d');\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     *\n     * @param {string} waveColor Fill color for the wave canvas\n     * @param {?string} progressColor Fill color for the progress canvas\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = waveColor;\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = progressColor;\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     */\n    fillRects(x, y, width, height) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(this.progressCtx, x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height) {\n        if (!ctx) {\n            return;\n        }\n        ctx.fillRect(x, y, width, height);\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n                Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        // Dummy media to catch errors\n        /** @private */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     *\n     * @private\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks);\n    }\n\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @private\n     */\n    _load(media, peaks) {\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        if (typeof media.load == 'function') {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        media.addEventListener('error', () => {\n            this.fireEvent('error', 'Error loading media element');\n        });\n\n        media.addEventListener('canplay', () => {\n            this.fireEvent('canplay');\n        });\n\n        media.addEventListener('ended', () => {\n            this.fireEvent('finish');\n        });\n\n        // Listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        media.addEventListener('play', () => {\n            this.fireEvent('play');\n        });\n\n        media.addEventListener('pause', () => {\n            this.fireEvent('pause');\n        });\n\n        media.addEventListener('seeked', event => {\n            this.fireEvent('seek');\n        });\n\n        media.addEventListener('volumechange', event => {\n            this.isMuted = media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = media.volume;\n            }\n            this.fireEvent('volume');\n        });\n\n        this.media = media;\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @private\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n"],"sourceRoot":""}