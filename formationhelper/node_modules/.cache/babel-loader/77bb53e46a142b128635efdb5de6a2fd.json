{"ast":null,"code":"/**\r\n * From url file path download and return Audio Buffer\r\n * path - path to file\r\n * context - Audio Context\r\n */\nexport const getAudioBuffer = async (path, context) => {\n  const response = await fetch(path);\n  const audioData = await response.arrayBuffer();\n  return new Promise((resolve, reject) => {\n    context.decodeAudioData(audioData, buffer => {\n      return resolve(buffer);\n    });\n  });\n};\n/**\r\n * Get window audio context\r\n */\n\nexport const getContext = () => {\n  window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext;\n  const context = new AudioContext();\n  return context;\n};","map":{"version":3,"sources":["C:\\Users\\cheny\\WebstormProjects\\FormationHelper\\formationhelper\\src\\Pages\\Components\\MusicPlayer\\Utils.js"],"names":["getAudioBuffer","path","context","response","fetch","audioData","arrayBuffer","Promise","resolve","reject","decodeAudioData","buffer","getContext","window","AudioContext","webkitAudioContext","mozAudioContext","oAudioContext"],"mappings":"AAAA;;;;;AAKA,OAAO,MAAMA,cAAc,GAAG,OAAOC,IAAP,EAAaC,OAAb,KAAyB;AACnD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,IAAD,CAA5B;AACA,QAAMI,SAAS,GAAG,MAAMF,QAAQ,CAACG,WAAT,EAAxB;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCP,IAAAA,OAAO,CAACQ,eAAR,CAAwBL,SAAxB,EAAmCM,MAAM,IAAI;AACzC,aAAOH,OAAO,CAACG,MAAD,CAAd;AACH,KAFD;AAGH,GAJM,CAAP;AAKH,CARM;AASP;;;;AAGA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5BC,EAAAA,MAAM,CAACC,YAAP,GACID,MAAM,CAACC,YAAP,IACAD,MAAM,CAACE,kBADP,IAEAF,MAAM,CAACG,eAFP,IAGAH,MAAM,CAACI,aAJX;AAKA,QAAMf,OAAO,GAAG,IAAIY,YAAJ,EAAhB;AACA,SAAOZ,OAAP;AACH,CARM","sourcesContent":["/**\r\n * From url file path download and return Audio Buffer\r\n * path - path to file\r\n * context - Audio Context\r\n */\r\nexport const getAudioBuffer = async (path, context) => {\r\n    const response = await fetch(path);\r\n    const audioData = await response.arrayBuffer();\r\n    return new Promise((resolve, reject) => {\r\n        context.decodeAudioData(audioData, buffer => {\r\n            return resolve(buffer);\r\n        });\r\n    });\r\n};\r\n/**\r\n * Get window audio context\r\n */\r\nexport const getContext = () => {\r\n    window.AudioContext =\r\n        window.AudioContext ||\r\n        window.webkitAudioContext ||\r\n        window.mozAudioContext ||\r\n        window.oAudioContext;\r\n    const context = new AudioContext();\r\n    return context;\r\n};"]},"metadata":{},"sourceType":"module"}