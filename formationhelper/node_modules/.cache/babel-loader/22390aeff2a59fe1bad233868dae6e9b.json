{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\cheny\\\\WebstormProjects\\\\FormationHelper\\\\formationhelper\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\cheny\\\\WebstormProjects\\\\FormationHelper\\\\formationhelper\\\\src\\\\Pages\\\\Components\\\\MusicPlayer\\\\Progress.js\";\nimport React, { Component } from 'react';\nimport Waveform from 'waveform-react';\nexport default class Progress extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      MusicName: null,\n      MusicLength: 0,\n      position: 0\n    };\n\n    this.setValue = (val, prop, sub) => {\n      if (sub) {\n        this.setState(state => _objectSpread({}, state, {\n          [sub]: _objectSpread({}, state[sub], {\n            [prop]: val\n          })\n        }));\n      } else {\n        this.setState({\n          [prop]: val\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Waveform // Audio buffer\n    , {\n      buffer: this.props.buffer // waveform height\n      ,\n      height: 100,\n      markerStyle: {\n        // Position marker color\n        color: '#000000',\n        // Position marker width (in pixels)\n        width: 3\n      } // Optionally handle user manually changing position (0 - 1)\n      ,\n      onPositionChange: pos => this.setValue(pos, 'position') // Wave plot type (line or bar)\n      ,\n      plot: \"bar\" // Marker position on waveform (0 - 1)\n      ,\n      position: this.state.position // redraw waveform on window size change (default: true)\n      ,\n      responsive: false // Show position marker\n      ,\n      showPosition: true,\n      waveStyle: {\n        // animate waveform on draw (default: true)\n        animate: false,\n        // waveform color\n        color: '#000000',\n        // width of each rendered point (min: 1, max: 10)\n        pointWidth: 0.5\n      } // waveform width\n      ,\n      width: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\cheny\\WebstormProjects\\FormationHelper\\formationhelper\\src\\Pages\\Components\\MusicPlayer\\Progress.js"],"names":["React","Component","Waveform","Progress","state","MusicName","MusicLength","position","setValue","val","prop","sub","setState","render","props","buffer","color","width","pos","animate","pointWidth"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAGA,eAAe,MAAMC,QAAN,SAAuBF,SAAvB,CAAgC;AAAA;AAAA;AAAA,SAC3CG,KAD2C,GACnC;AACJC,MAAAA,SAAS,EAAE,IADP;AAEJC,MAAAA,WAAW,EAAE,CAFT;AAGJC,MAAAA,QAAQ,EAAE;AAHN,KADmC;;AAAA,SAO3CC,QAP2C,GAOhC,CAACC,GAAD,EAAMC,IAAN,EAAYC,GAAZ,KAAoB;AAC3B,UAAIA,GAAJ,EAAS;AACL,aAAKC,QAAL,CAAcR,KAAK,sBACZA,KADY;AAEf,WAACO,GAAD,qBACOP,KAAK,CAACO,GAAD,CADZ;AAEI,aAACD,IAAD,GAAQD;AAFZ;AAFe,UAAnB;AAOH,OARD,MAQO;AACH,aAAKG,QAAL,CAAc;AAAE,WAACF,IAAD,GAAQD;AAAV,SAAd;AACH;AACJ,KAnB0C;AAAA;;AAqB3CI,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,QAAD,CACI;AADJ;AAEI,MAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,MAFvB,CAGI;AAHJ;AAII,MAAA,MAAM,EAAE,GAJZ;AAKI,MAAA,WAAW,EAAE;AACT;AACAC,QAAAA,KAAK,EAAE,SAFE;AAGT;AACAC,QAAAA,KAAK,EAAE;AAJE,OALjB,CAWI;AAXJ;AAYI,MAAA,gBAAgB,EAAEC,GAAG,IAAI,KAAKV,QAAL,CAAcU,GAAd,EAAmB,UAAnB,CAZ7B,CAaI;AAbJ;AAcI,MAAA,IAAI,EAAC,KAdT,CAeI;AAfJ;AAgBI,MAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWG,QAhBzB,CAiBI;AAjBJ;AAkBI,MAAA,UAAU,EAAE,KAlBhB,CAmBI;AAnBJ;AAoBI,MAAA,YAAY,EAAE,IApBlB;AAqBI,MAAA,SAAS,EAAE;AACP;AACAY,QAAAA,OAAO,EAAE,KAFF;AAGP;AACAH,QAAAA,KAAK,EAAE,SAJA;AAKP;AACAI,QAAAA,UAAU,EAAE;AANL,OArBf,CA6BI;AA7BJ;AA8BI,MAAA,KAAK,EAAE,GA9BX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAkCH;;AAxD0C","sourcesContent":["import React, {Component} from 'react';\r\nimport Waveform from 'waveform-react';\r\n\r\n\r\nexport default class Progress extends Component{\r\n    state = {\r\n        MusicName: null,\r\n        MusicLength: 0,\r\n        position: 0,\r\n    };\r\n\r\n    setValue = (val, prop, sub) => {\r\n        if (sub) {\r\n            this.setState(state => ({\r\n                ...state,\r\n                [sub]: {\r\n                    ...state[sub],\r\n                    [prop]: val\r\n                }\r\n            }));\r\n        } else {\r\n            this.setState({ [prop]: val });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Waveform\r\n                // Audio buffer\r\n                buffer={this.props.buffer}\r\n                // waveform height\r\n                height={100}\r\n                markerStyle={{\r\n                    // Position marker color\r\n                    color: '#000000',\r\n                    // Position marker width (in pixels)\r\n                    width: 3\r\n                }}\r\n                // Optionally handle user manually changing position (0 - 1)\r\n                onPositionChange={pos => this.setValue(pos, 'position')}\r\n                // Wave plot type (line or bar)\r\n                plot=\"bar\"\r\n                // Marker position on waveform (0 - 1)\r\n                position={this.state.position}\r\n                // redraw waveform on window size change (default: true)\r\n                responsive={false}\r\n                // Show position marker\r\n                showPosition={true}\r\n                waveStyle={{\r\n                    // animate waveform on draw (default: true)\r\n                    animate: false,\r\n                    // waveform color\r\n                    color: '#000000',\r\n                    // width of each rendered point (min: 1, max: 10)\r\n                    pointWidth: 0.5\r\n                }}\r\n                // waveform width\r\n                width={500}\r\n            />\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}