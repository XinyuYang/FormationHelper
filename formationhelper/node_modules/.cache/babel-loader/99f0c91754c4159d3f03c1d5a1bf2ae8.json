{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName } from '@material-ui/utils';\n/**\r\n * Enables ref forwarding on a given component that uses `innerRef` to forward refs\r\n * This is useful for component implementations that predate `forwardRef` and\r\n * used other props to forward refs.\r\n *\r\n * Instead of `<Component innerRef={ref} />` you can write\r\n * `<withForwardRef(Component) ref={ref} />`.\r\n *\r\n * This HOC does not handle prop collision. In\r\n * `<withForwardRef(Component) ref={ref} innerRef={innerRef} />` `innerRef` will be dropped\r\n *\r\n * Only copies statics from material-ui over.\r\n *\r\n * @param {React.ComponentType} Component\r\n * @returns {React.ForwardRefComponent}\r\n */\n\nexport default function withForwardedRef(Component) {\n  var ForwardRefComponent = React.forwardRef(function (props, ref) {\n    return (// We expect this component to be wrapped in `withStyles` in which `innerRef`\n      // is already intercepted and therefore won't appear in `props` here.\n      React.createElement(Component, _extends({}, props, {\n        innerRef: ref\n      }))\n    );\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    ForwardRefComponent.displayName = \"ForwardRef(\".concat(getDisplayName(Component), \")\");\n  }\n\n  return hoistNonReactStatics(ForwardRefComponent, Component);\n}","map":null,"metadata":{},"sourceType":"module"}