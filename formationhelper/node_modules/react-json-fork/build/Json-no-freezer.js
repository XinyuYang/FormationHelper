/*
react-json-fork v0.0.1
https://github.com/arqex/react-json
MIT: https://github.com/arqex/react-json/raw/master/LICENSE
*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require(undefined), require(undefined));
	else if(typeof define === 'function' && define.amd)
		define([, ], factory);
	else if(typeof exports === 'object')
		exports["Json"] = factory(require(undefined), require(undefined));
	else
		root["Json"] = factory(root["React"], root["Freezer"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1),\r\n\tFreezer = __webpack_require__(2),\r\n\tobjectAssign = __webpack_require__(3),\r\n\tTypeField = __webpack_require__(4),\r\n\tObjectField = __webpack_require__(6),\r\n\tArrayField = __webpack_require__(11),\r\n\tStringField = __webpack_require__(12),\r\n\tBooleanField = __webpack_require__(14),\r\n\tNumberField = __webpack_require__(15),\r\n\tTextField = __webpack_require__(16),\r\n\tPasswordField = __webpack_require__(17),\r\n\tSelectField = __webpack_require__(18),\r\n\tdeepSettings = __webpack_require__(5)\r\n;\r\n\r\n// Detect flexbox support\r\nvar flexboxClass = typeof document != 'undefined' || '',\r\n\tcss\r\n;\r\nif( flexboxClass ){\r\n\tcss = document.documentElement.style;\r\n\tif( ('flexWrap' in css) || ('webkitFlexWrap' in css) || ('msFlexWrap' in css) )\r\n\t\tflexboxClass = ' jsonFlex';\r\n}\r\n\r\n\r\n\r\n/**\r\n * The main component. It will refresh the props when the store changes.\r\n *\r\n * @prop  {Object|FreezerNode} value The JSON object, value of the form.\r\n * @prop  {Object} settings Customization settings\r\n */\r\nvar Json = React.createClass({\r\n\r\n\tgetDefaultProps: function(){\r\n\t\treturn {\r\n\t\t\tvalue: {},\r\n\t\t\tbinding:{},\r\n\t\t\terrors: false,\r\n\t\t\tupdating: false\r\n\t\t};\r\n\t},\r\n\r\n\tchildContextTypes: {\r\n\t\ttypeDefaults: React.PropTypes.object\r\n\t},\r\n\r\n\tgetChildContext: function(){\r\n\t\treturn {\r\n\t\t\ttypeDefaults: this.state.defaults\r\n\t\t};\r\n\t},\r\n\r\n\tgetInitialState: function(){\r\n\t\tvar me = this,\r\n\t\t\tvalue = this.props.value,\r\n\t\t\tbinding = this.props.binding,\r\n\t\t\tlistener\r\n\t\t;\r\n\r\n\t\t// If it is a freezer node\r\n\t\tif( !value.getListener )\r\n\t\t\tvalue = new Freezer( value ).get();\r\n\r\n\t\t// Listen to changes\r\n\t\tvalue.getListener().on('update', function( updated ){\r\n\t\t\tif( me.state.updating )\r\n\t\t\t\treturn me.setState({ updating: false });\r\n\r\n\t\t\tif (me.state.value === updated) return;\r\n\t\t\tme.setState({value: updated});\r\n\r\n\r\n\t\t\tif( me.state.errors )\r\n\t\t\t\tme.getValidationErrors();\r\n\r\n\t\t\tif( me.props.onChange )\r\n\t\t\t\tme.props.onChange( updated.toJS() );\r\n\t\t});\r\n\r\n\r\n\r\n\t\t// If it is a freezer node\r\n\t\tif( !binding.getListener )\r\n\t\t\tbinding = new Freezer( binding ).get();\r\n\r\n\t\t// Listen to changes\r\n\t\tbinding.getListener().on('update', function( updated ){\r\n\t\t\tif (me.state.binding === updated) return;\r\n\r\n\t\t\tme.setState({binding: updated});\r\n\r\n\r\n\t\t\tif( me.props.onBindingChange )\r\n\t\t\t\tme.props.onBindingChange( updated.toJS() );\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\tvalue: value,\r\n\t\t\tbinding:binding,\r\n\t\t\tdefaults: this.createDefaults(),\r\n\t\t\tid: this.getId()\r\n\t\t};\r\n\t},\r\n\r\n\tcomponentWillReceiveProps: function( newProps ){\r\n\t\tif( !newProps.value.getListener || !newProps.binding.getListener){\r\n\t\t\tthis.setState({\r\n\t\t\t\tupdating: true,\r\n\t\t\t\tvalue: this.state.value.reset( newProps.value ),\r\n\t\t\t\tbinding: this.state.binding.reset( newProps.binding )\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.setState( {defaults: this.createDefaults()} );\r\n\t},\r\n\r\n\trender: function(){\r\n\t\tvar settings = this.props.settings || {},\r\n\t\t\tob = React.createElement( TypeField, {\r\n\t\t\t\ttype: 'object',\r\n\t\t\t\tvalue: this.state.value,\r\n\t\t\t\tbinding:this.state.binding,\r\n\t\t\t\tsettings: objectAssign( {}, this.state.defaults.object, {\r\n\t\t\t\t\tfields: settings.fields,\r\n\t\t\t\t\tuseBinding: settings.useBinding,\r\n\t\t\t\t\tediting: this.getFormSetting( settings, 'editing', 'always'),\r\n\t\t\t\t\tfixedFields: this.getFormSetting( settings, 'fixedFields', true),\r\n\t\t\t\t\tadder:  this.getFormSetting( settings, 'adder', false),\r\n\t\t\t\t\thiddenFields: settings.hiddenFields,\r\n\t\t\t\t\theader: false,\r\n\t\t\t\t\torder: settings.order\r\n\t\t\t\t}),\r\n\t\t\t\tref: 'value',\r\n\t\t\t\tdefaults: this.state.defaults,\r\n\t\t\t\tid: this.state.id\r\n\t\t\t}),\r\n\t\t\tclassName = 'jsonEditor' + flexboxClass\r\n\t\t;\r\n\r\n\t\treturn React.DOM.div({ className: className }, ob);\r\n\t},\r\n\r\n\tgetValue: function(){\r\n\t\treturn this.state.value.toJS();\r\n\t},\r\n\tgetBinding:function(){\r\n\t\treturn this.state.binding.toJS();\r\n\t},\r\n\r\n\tgetValidationErrors: function(){\r\n\t\tvar jsonValue = this.getValue(),\r\n\t\t\terrors = this.refs.value.getValidationErrors( jsonValue )\r\n\t\t;\r\n\r\n\t\tthis.setState( {errors: errors.length} );\r\n\t\treturn errors.length ? errors : false;\r\n\t},\r\n\tgetDeepSettings: function(){\r\n\t\tvar settings = {};\r\n\r\n\t\tfor( var key in deepSettings ){\r\n\t\t\tsettings[ key ] = deepSettings[ key ]( this, settings[key] );\r\n\t\t}\r\n\r\n\t\treturn settings;\r\n\t},\r\n\tcreateDefaults: function(){\r\n\t\tvar settings = this.props.settings || {},\r\n\t\t\tcomponents = TypeField.prototype.components,\r\n\t\t\tpropDefaults = settings.defaults || {},\r\n\t\t\tdefaults = {}\r\n\t\t;\r\n\r\n\t\tfor( var type in components ){\r\n\t\t\tdefaults[ type ] = objectAssign( {}, components[ type ].prototype.defaults || {}, propDefaults[ type ] || {});\r\n\t\t}\r\n\r\n\t\treturn defaults;\r\n\t},\r\n\r\n\tgetId: function(){\r\n\t\treturn btoa( parseInt( Math.random() * 10000 ) ).replace(/=/g, '');\r\n\t},\r\n\r\n\tgetFormSetting: function( settings, field, def ){\r\n\t\tif( typeof settings[ field ] != 'undefined' )\r\n\t\t\treturn settings[ field ];\r\n\t\tif( settings.form )\r\n\t\t\treturn def;\r\n\t}\r\n});\r\n\r\n// Add global modifier functions\r\nJson.registerType = TypeField.registerType.bind( TypeField );\r\n\r\n// Register basic types\r\nJson.registerType( 'object', ObjectField );\r\nJson.registerType( 'array', ArrayField, true );\r\nJson.registerType( 'string', StringField, true );\r\nJson.registerType( 'text', TextField, true );\r\nJson.registerType( 'number', NumberField, true );\r\nJson.registerType( 'boolean', BooleanField, true );\r\nJson.registerType( 'password', PasswordField );\r\nJson.registerType( 'select', SelectField );\r\n\r\nmodule.exports = Json;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./Json.js\n ** module id = 0\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./Json.js?");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"React\"}\n ** module id = 1\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///external_%7B%22root%22:%22React%22%7D?");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"Freezer\"}\n ** module id = 2\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///external_%7B%22root%22:%22Freezer%22%7D?");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction ToObject(val) {\n\tif (val == null) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nmodule.exports = Object.assign || function (target, source) {\n\tvar from;\n\tvar keys;\n\tvar to = ToObject(target);\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = arguments[s];\n\t\tkeys = Object.keys(Object(from));\n\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tto[keys[i]] = from[keys[i]];\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/object-assign/index.js\n ** module id = 3\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./~/object-assign/index.js?");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\r\n\r\nvar React = __webpack_require__(1),\r\n\tdeepSettings = __webpack_require__(5),\r\n\tobjectAssign = __webpack_require__(3)\r\n;\r\n\r\nvar components = {};\r\nvar typeCheckOrder = [];\r\n\r\nvar TypeField = React.createClass({\r\n\tcomponents: {},\r\n\ttypeCheckOrder: [],\r\n\r\n\tcontextTypes: {\r\n\t\ttypeDefaults: React.PropTypes.object\r\n\t},\r\n\r\n\trender: function() {\r\n\t\tvar Component = this.getComponent(),\r\n\t\t\tsettings = objectAssign(\r\n\t\t\t\t{},\r\n\t\t\t\tthis.context.typeDefaults[ this.props.type ],\r\n\t\t\t\tthis.props.settings\r\n\t\t\t)\r\n\t\t;\r\n\r\n\t\tthis.addDeepSettings( settings );\r\n\r\n\t\treturn React.createElement( Component, {\r\n\t\t\tvalue: this.props.value,\r\n\t\t\tbinding:this.props.binding,\r\n\t\t\tsettings: settings,\r\n\t\t\tonUpdated: this.props.onUpdated,\r\n\t\t\tid: this.props.id,\r\n\t\t\tref: 'field'\r\n\t\t});\r\n\t},\r\n\r\n\tgetComponent: function(){\r\n\t\tvar type = this.props.type;\r\n\t\tif( !type )\r\n\t\t\ttype = this.guessType( this.props.value );\r\n\r\n\t\tthis.fieldType = type;\r\n\r\n\t\treturn this.components[ type ];\r\n\t},\r\n\r\n\tguessType: function( value ){\r\n\t\tvar type = false,\r\n\t\t\ti = 0,\r\n\t\t\ttypes = this.typeCheckOrder,\r\n\t\t\tcomponent\r\n\t\t;\r\n\r\n\t\twhile( !type && i < types.length ){\r\n\t\t\tcomponent = this.components[ types[i] ].prototype;\r\n\t\t\tif( component.isType && component.isType( value ) )\r\n\t\t\t\ttype = types[i++];\r\n\t\t\telse\r\n\t\t\t\ti++;\r\n\t\t}\r\n\r\n\t\treturn type || 'object';\r\n\t},\r\n\r\n\tgetValidationErrors: function( jsonValue ){\r\n\t\treturn this.refs.field.getValidationErrors( jsonValue );\r\n\t},\r\n\r\n\taddDeepSettings: function( settings ){\r\n\t\tvar parentSettings = this.props.parentSettings || {},\r\n\t\t\tdeep\r\n\t\t;\r\n\r\n\t\tfor( var key in deepSettings ){\r\n\t\t\tdeep = deepSettings[ key ]( parentSettings[key], settings[key] );\r\n\t\t\tif( typeof deep != 'undefined' )\r\n\t\t\t\tsettings[ key ] = deep;\r\n\t\t}\r\n \t}\r\n});\r\n\r\nTypeField.registerType = function( name, Component, selectable ){\r\n\tvar proto = TypeField.prototype;\r\n\tproto.components[ name ] = Component;\r\n\tif( selectable )\r\n\t\tproto.typeCheckOrder.unshift( name );\r\n};\r\n\r\nmodule.exports = TypeField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/TypeField.js\n ** module id = 4\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/TypeField.js?");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("module.exports = {\r\n\tediting: function( parentValue, value ){\r\n\t\tif( typeof value != 'undefined' )\r\n\t\t\treturn value;\r\n\r\n\t\tif( parentValue == 'always' )\r\n\t\t\treturn 'always';\r\n\r\n\t\t// else return undefined: do not override\r\n\t},\r\n\tadder: function( parentValue, value ){\r\n\r\n\t\tif( typeof value != 'undefined' )\r\n\t\t\treturn value;\r\n\t\tif( typeof parentValue != 'undefined' )\r\n\t\t\treturn parentValue;\r\n\r\n\t\treturn true;\r\n\t},\r\n\tfixedFields: function( parentValue, value ){\r\n\t\tif( typeof value != 'undefined' )\r\n\t\t\treturn value;\r\n\r\n\t\tif( typeof parentValue == 'boolean' )\r\n\t\t\treturn parentValue;\r\n\t}\r\n};\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/deepSettings.js\n ** module id = 5\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/deepSettings.js?");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\r\n\r\nvar React = __webpack_require__(1),\r\n\tField = __webpack_require__(7),\r\n\tassign = __webpack_require__(3),\r\n\tCompoundFieldMixin = __webpack_require__(9)\r\n;\r\n\r\n/**\r\n * Component for editing a hash.\r\n * @param  {FreezerNode} value The value of the object.\r\n * @param  {Mixed} original The value of the component it the original json.\r\n */\r\nvar ObjectField = React.createClass({\r\n\tmixins: [CompoundFieldMixin],\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn this.getStateFromProps( this.props );\r\n\t},\r\n\r\n\tgetStateFromProps: function( props ){\r\n\t\treturn {\r\n\t\t\tediting: props.settings.editing || false,\r\n\t\t\tfields: assign({}, props.settings && props.settings.fields || {})\r\n\t\t};\r\n\t},\r\n\r\n\tdefaultValue: {},\r\n\tcomponentWillReceiveProps: function(nextProps) {\r\n\t\tif (this.props.settings.fields !== nextProps.settings.fields) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tfields: assign({}, nextProps.settings && nextProps.settings.fields || {})\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\trender: function(){\r\n\t\tvar me = this,\r\n\t\t\tsettings = this.props.settings,\r\n\t\t\tclassName = this.state.editing || settings.header === false ? 'open jsonObject jsonCompound' : 'jsonObject jsonCompound',\r\n\t\t\topenHash = '',\r\n\t\t\tdefinitions = this.state.fields, bindings = this.state.bindings,\r\n\t\t\tattrs = [],\r\n\t\t\tvalue = assign({}, this.props.value ),\r\n\t\t\tfixedFields = this.getFixedFields(),\r\n\t\t\thidden = this.getHiddenFields(),\r\n\t\t\tgroupCount = 0,\r\n\t\t\tdefinition\r\n\t\t;\r\n\r\n\t\tthis.getFieldOrder().forEach( function( field ){\r\n\t\t\t// If the field is an array handle grouping\r\n\t\t\tif( field.constructor === Array )\r\n\t\t\t\tattrs.push( me.renderGroup( field, fixedFields, ++groupCount ) );\r\n\t\t\telse if( !hidden[ field ] )\r\n\t\t\t\tattrs.push( me.renderField( field, fixedFields ) );\r\n\t\t});\r\n\r\n\t\tvar openHashChildren = [ attrs ];\r\n\t\tif( settings.adder !== false ){\r\n\t\t\topenHashChildren.push( this.renderAdder() );\r\n\t\t}\r\n\r\n\t\topenHash = React.DOM.div({ key: 'o', className: 'jsonChildren'}, openHashChildren);\r\n\t\treturn React.DOM.span({className: className}, [\r\n\t\t\tthis.renderHeader(),\r\n\t\t\topenHash\r\n\t\t]);\r\n\t},\r\n\r\n\trenderField: function( key, fixedFields ){\r\n\t\tvar value = this.props.value[ key ],\r\n\t\t\tdefinition = this.state.fields[ key ] || {},\r\n\t\t\tbinding = this.props.binding && this.props.binding[ key ],\r\n\t\t\tfixed = fixedFields === true || typeof fixedFields == 'object' && fixedFields[ key ]\r\n\t\t;\r\n\r\n\t\tif( !definition.settings )\r\n\t\t\tdefinition.settings = {};\r\n\r\n\t\treturn React.createElement( Field, {\r\n\t\t\tvalue: value,\r\n\t\t\tkey: key,\r\n\t\t\tname: key,\r\n\t\t\tref: key,\r\n\t\t\tfixed: fixed,\r\n\t\t\tid: this.props.id,\r\n\t\t\tdefinition: definition,\r\n\t\t\tbinding:binding,\r\n\t\t\tonBindingUpdated: this.updateBinding,\r\n\t\t\tonUpdated: this.updateField,\r\n\t\t\tonDeleted: this.deleteField,\r\n\t\t\tparentSettings: this.props.settings\r\n\t\t});\r\n\t},\r\n\r\n\trenderGroup: function( fieldNames, fixedFields, groupNumber ){\r\n\t\tvar me = this,\r\n\t\t\tfields = []\r\n\t\t;\r\n\r\n\t\tfieldNames.forEach( function( field ){\r\n\t\t\tfields.push( me.renderField( field, fixedFields ) );\r\n\t\t});\r\n\r\n\t\treturn React.DOM.div({ className: 'jsonGroup jsonGroup_' + groupNumber }, fields );\r\n\t},\r\n\r\n\tgetDefaultHeader: function(){\r\n\t\treturn 'Map [' + Object.keys( this.props.value ).length + ']';\r\n\t},\r\n\r\n\tgetDefaultAdder: function(){\r\n\t\treturn '+ Add field';\r\n\t},\r\n\r\n\tupdateField: function( key, value ){\r\n\t\tthis.checkEditingSetting( key );\r\n\t\tthis.props.value.set( key, value );\r\n\t},\r\n\tupdateBinding: function( key, value ){\r\n\t\tthis.props.binding.set( key, value );\r\n\t},\r\n\r\n\tdeleteField: function( key ){\r\n\t\tthis.props.value.remove( key );\r\n\t},\r\n\r\n\tgetValidationErrors: function( jsonValue ){\r\n\t\tvar me = this,\r\n\t\t\terrors = [],\r\n\t\t\tattrs = Object.keys( this.refs )\r\n\t\t;\r\n\r\n\t\tattrs.forEach( function( attr ){\r\n\t\t\tvar error = me.refs[attr].getValidationErrors();\r\n\t\t\tif( error )\r\n\t\t\t\terrors = errors.concat( error );\r\n\t\t});\r\n\r\n\t\treturn errors;\r\n\t},\r\n\r\n\tgetFieldOrder: function(){\r\n\t\tvar me = this,\r\n\t\t\tsettingsOrder = this.props.settings.order,\r\n\t\t\torderType = typeof settingsOrder,\r\n\t\t\tfields = this.props.settings.fields || {},\r\n\t\t\tgroup\r\n\t\t;\r\n\r\n\t\tif( !settingsOrder || (orderType != 'function' && settingsOrder.constructor !== Array) )\r\n\t\t\treturn Object.keys( this.props.value );\r\n\r\n\t\tvar value = assign( {}, this.props.value ),\r\n\t\t\torder = []\r\n\t\t;\r\n\r\n\t\tif( orderType == 'function' )\r\n\t\t\treturn settingsOrder( value );\r\n\r\n\t\t// Add fields in the array\r\n\t\tif( settingsOrder.constructor === Array ){\r\n\t\t\tsettingsOrder.forEach( function( field ){\r\n\r\n\t\t\t\t// An array, handle group\r\n\t\t\t\tif( field.constructor == Array ){\r\n\t\t\t\t\tgroup = [];\r\n\t\t\t\t\tfield.forEach( function( groupField ){\r\n\t\t\t\t\t\tif( me.addFieldToOrder( groupField, value, fields ) ){\r\n\t\t\t\t\t\t\tgroup.push( groupField );\r\n\r\n\t\t\t\t\t\t\t// Delete them from current values\r\n\t\t\t\t\t\t\tdelete value[ groupField ];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif( group.length )\r\n\t\t\t\t\t\torder.push( group );\r\n\t\t\t\t}\r\n\t\t\t\telse if( me.addFieldToOrder( field, value, fields ) ){\r\n\t\t\t\t\torder.push( field );\r\n\r\n\t\t\t\t\t// Delete them from current values\r\n\t\t\t\t\tdelete value[ field ];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Add the keys left in the value\r\n\t\tfor( var key in value ){\r\n\t\t\tif( order.indexOf( key ) == -1 )\r\n\t\t\t\torder.push( key );\r\n\t\t}\r\n\r\n\t\treturn order;\r\n\t},\r\n\r\n\t/**\r\n\t * Checks when a field that appears in the sort settings needs to be added to\r\n\t * the fieldOrder array\r\n\t *\r\n\t * @param {String} field The field name\r\n\t */\r\n\taddFieldToOrder: function( field, value, fields ){\r\n\t\treturn typeof value[ field ] != 'undefined' || fields[ field ] && fields[ field ].type == 'react';\r\n\t},\r\n\r\n\tgetHiddenFields: function(){\r\n\t\tvar hidden = this.props.settings.hiddenFields,\r\n\t\t\tfields = {}\r\n\t\t;\r\n\t\tif( !hidden )\r\n\t\t\treturn fields;\r\n\r\n\t\thidden.forEach( function( f ){\r\n\t\t\tfields[ f ] = 1;\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n});\r\n\r\nmodule.exports = ObjectField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/ObjectField.js\n ** module id = 6\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/ObjectField.js?");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\r\n\r\nvar React = __webpack_require__(1),\r\n\tobjectAssign = __webpack_require__(3),\r\n\tValidation = __webpack_require__(8),\r\n\tTypeField = __webpack_require__(4)\r\n\r\n;\r\n\r\nvar clearObjProps = function (obj) {\r\n\tfor(var k in obj) {\r\n\t\tif(typeof obj[k] == \"object\"\r\n\t\t\t&& obj[k] !== null\r\n\t\t\t&& !(obj[k] instanceof Array)\r\n\t\t\t&& !(obj[k] instanceof String)\r\n\t\t\t&& !(obj[k] instanceof Number)) {\r\n\r\n\t\t\tclearObjProps(obj[k]);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tswitch(typeof obj[k]) {\r\n\t\t\tcase 'undefined':\r\n\t\t\tcase 'boolean':\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'number':\r\n\t\t\t\tobj[k] = undefined;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tobj[k] = [];\r\n\t\t}\r\n\t}\r\n\treturn  obj;\r\n}\r\n/**\r\n * Field component that represent each Array element or Object field.\r\n * @param  {string} name The key of the attribute in the parent.\r\n * @param  {Mixed} value The value of the attribute.\r\n * @param {Mixed} original The value of the attibute in the original json to highlight the changes.\r\n * @param {FreezerNode} parent The parent node to notify attribute updates.\r\n */\r\nvar Field = React.createClass({\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn {error: false};\r\n\t},\r\n\tgetDefaultProps: function(){\r\n\t\treturn {\r\n\t\t\tdefinition: {}\r\n\t\t};\r\n\t},\r\n\trender: function(){\r\n\t\tvar definition = this.props.definition || {},\r\n\t\t\t\tbinding = this.props.binding,\r\n\t\t\tclassName = 'jsonField',\r\n\t\t\ttype = definition.type || TypeField.prototype.guessType( this.props.value ),\r\n\t\t\tid = this.props.id + '_' + this.props.name,\r\n\t\t\terror = '',\r\n\t\t\ttypeField\r\n\t\t;\r\n\r\n\r\n\r\n\t\tif( type == 'react' )\r\n\t\t\treturn this.renderReactField( definition );\r\n\r\n\t\tif (this.useBinding() && binding !== undefined) {\r\n\t\t\t//render Object with binding\r\n\t\t\ttypeField = [this.renderBindingField(id)];\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttypeField = [this.renderTypeField(type, id)];\r\n\t\t}\r\n\t\tclassName += ' ' + type + 'Field';\r\n\r\n\t\tif( this.state.error ){\r\n\t\t\tclassName += ' jsonError';\r\n\t\t\tif( this.state.error !== true )\r\n\t\t\t\terror = React.DOM.span({ key:'e', className: 'jsonErrorMsg' }, this.state.error );\r\n\t\t}\r\n\r\n\t\tvar jsonName = [ React.DOM.label({ key: 's1', htmlFor: id }, (definition.title || this.props.name) + ':' ) ];\r\n\r\n\t\tif( this.props.fixed ){\r\n\t\t\t// If the field cannot be removed, add a placeholder to maintain the design\r\n\t\t\tjsonName.unshift( React.DOM.span({ key:'f', className: 'jsonFixed' }) );\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjsonName.unshift( React.DOM.a({ key:'a', href: '#', className: 'jsonRemove', onClick: this.handleRemove}, 'x') );\r\n\t\t}\r\n\r\n\t\tif(this.useBinding() && binding === undefined){\r\n\t\t\ttypeField.unshift( React.DOM.a({ key:'b', className: 'jsonBind', onClick: this.handleAddBinding}, '=') );\r\n\t\t}\r\n\r\n\t\tif(this.props.value === undefined && !(this.useBinding() && binding !== undefined) ){\r\n\t\t\t// If the field cannot be removed, add a placeholder to maintain the design\r\n\t\t\ttypeField.unshift( React.DOM.span({ key:'f', className: 'jsonFixed' }) );\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttypeField.unshift( React.DOM.a({ key:'r', className: 'jsonReset', onClick: this.handleReset}, 'x') );\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn React.DOM.div({className: className}, [\r\n\t\t\tReact.DOM.span( {className: 'jsonName', key: 'n'}, jsonName ),\r\n\t\t\tReact.DOM.span( {className: 'jsonValue', key: 'v'}, typeField ),\r\n\t\t\terror\r\n\t\t]);\r\n\t},\r\n    useBinding:function(){\r\n\t\treturn this.props.parentSettings && this.props.parentSettings.useBinding;\r\n\t},\r\n\trenderTypeField: function( type, id ){\r\n\t\tvar definition = this.props.definition,\r\n\t\t\tsettings = objectAssign( {}, definition.settings || {} ),\r\n\t\t\tcomponent\r\n\t\t;\r\n\r\n\t\tif( definition.fields )\r\n\t\t\tsettings.fields = definition.fields;\r\n\r\n\t\tcomponent = React.createElement( TypeField, {\r\n\t\t\ttype: type,\r\n\t\t\tvalue: this.props.value,\r\n\t\t\tbinding:this.props.binding,\r\n\t\t\tsettings: settings,\r\n\t\t\tonUpdated: this.onUpdated,\r\n\t\t\tref: 'typeField',\r\n\t\t\tid: id,\r\n\t\t\tparentSettings: this.props.parentSettings\r\n\t\t});\r\n\t\treturn component;\r\n\t},\r\n\trenderBindingField: function(id) {\r\n\r\n\t\treturn React.createElement(TypeField, {\r\n\t\t\ttype: 'object',\r\n\t\t\tvalue: this.props.binding,\r\n\t\t\tsettings: {\r\n\t\t\t\tfields: {\r\n\t\t\t\t\tpath:{type:'string'},\r\n\t\t\t\t\tmode: {\r\n\t\t\t\t\t\ttype: 'select', settings: {\r\n\t\t\t\t\t\t\tediting: false,\r\n\t\t\t\t\t\t\toptions: ['OneWay', 'TwoWay','OneTime'].map(function (key, value) {\r\n\t\t\t\t\t\t\t\treturn {value: key, label: key};\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tconverter: {\r\n\t\t\t\t\t\ttype: 'codeEditor'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tconverterArgs:{type:'string'}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonUpdated: this.onBindingUpdated,\r\n\t\t\tref: 'typeField',\r\n\t\t\tid: id,\r\n\t\t\tparentSettings: this.props.parentSettings\r\n\t\t});\r\n\t},\r\n\r\n\trenderReactField: function( definition ){\r\n\t\treturn React.DOM.div( { className: 'jsonField reactField' }, definition.output );\r\n\t},\r\n\r\n\thandleRemove: function( e ){\r\n\t\tthis.props.onDeleted( this.props.name );\r\n\t},\r\n\thandleReset: function( e ){\r\n\t\tvar definition = this.props.definition || {},type = definition.type || TypeField.prototype.guessType( this.props.value );\r\n\t\tif (type === 'object') {\r\n\t\t\tthis.onUpdated(clearObjProps(this.props.value.toJS()));\r\n\t\t}else{\r\n\t\t\tthis.onUpdated(undefined);\r\n\t\t}\r\n\t},\r\n\thandleAddBinding:function(e){\r\n\t\tvar defaultValues = {\r\n\t\t\tpath: undefined,\r\n\t\t\tconverter: undefined,\r\n\t\t\tconverterArgs:undefined,\r\n\t\t\tmode: 'OneWay'\r\n\t\t};\r\n\t\tthis.onBindingUpdated(defaultValues);\r\n\r\n\t},\r\n\r\n\tshouldComponentUpdate: function( nextProps, nextState ){\r\n\t\treturn nextProps.value != this.props.value ||  nextProps.binding != this.props.binding  || nextState.error != this.state.error;\r\n\t},\r\n\r\n\tonUpdated: function( value ) {\r\n\t\tif (this.useBinding() && this.props.binding !== undefined){\r\n\t\t\tthis.onBindingUpdated(value);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar definition = this.props.definition;\r\n\t\tif (this.props.value !== value) {\r\n\t\t\tthis.props.onUpdated(this.props.name, value);\r\n\t\t\tif (definition.onChange)\r\n\t\t\t\tdefinition.onChange(value, this.props.value);\r\n\t\t}\r\n\r\n\t},\r\n\tonBindingUpdated: function( value ) {\r\n\t\tthis.props.onBindingUpdated(this.props.name, value);\r\n\t},\r\n\r\n\tgetValidationErrors: function( jsonValue ){\r\n\t\tvar childErrors = [],\r\n\t\t\tvalidates = this.props.definition.validates,\r\n\t\t\tname = this.props.name,\r\n\t\t\tfield = this.refs.typeField\r\n\t\t;\r\n\r\n\t\tif( !field )\r\n\t\t\treturn [];\r\n\r\n\t\tif( field.fieldType == 'object' ){\r\n\t\t\tchildErrors = field.getValidationErrors( jsonValue );\r\n\t\t\tchildErrors.forEach( function( error ){\r\n\t\t\t\tif( !error.path )\r\n\t\t\t\t\terror.path = name;\r\n\t\t\t\telse\r\n\t\t\t\t\terror.path = name + '.' + error.path;\r\n\t\t\t});\r\n\r\n\t\t\tif( childErrors.length )\r\n\t\t\t\tthis.setState( {error: true} );\r\n\t\t}\r\n\r\n\t\tif( !validates )\r\n\t\t\treturn childErrors;\r\n\r\n\r\n\t\tvar error = Validation.getValidationError( this.props.value, jsonValue, validates ),\r\n\t\t\tmessage\r\n\t\t;\r\n\r\n\t\tif( error ){\r\n\t\t\tmessage = this.props.definition.errorMessage;\r\n\t\t\tif( !message )\r\n\t\t\t\tmessage = ( this.props.definition.label || this.props.name ) + ' value is not valid.';\r\n\r\n\t\t\terror.path = name;\r\n\t\t\terror.message = message;\r\n\t\t\tthis.setState( {error: message} );\r\n\t\t\tchildErrors = childErrors.concat( [error] );\r\n\t\t}\r\n\t\telse if( this.state.error ){\r\n\t\t\tthis.setState( {error: false} );\r\n\t\t}\r\n\r\n\t\treturn childErrors;\r\n\t}\r\n\r\n});\r\n\r\nmodule.exports = Field;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Field.js\n ** module id = 7\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/Field.js?");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("'use strict';\r\n\r\nvar ValidationMethods = {\r\n  required: function( value ){\r\n      if( !value )\r\n          return false;\r\n\r\n      // Empty trimmed string does not validate\r\n      if( typeof value == 'string' && !value.trim() )\r\n          return false;\r\n\r\n      return true;\r\n  },\r\n\r\n  email: function( value ){\r\n\r\n      // If nothing given, maybe the field is not required\r\n      // so it passes the check.\r\n      if( !value )\r\n          return true;\r\n\r\n      /* http://stackoverflow.com/questions/46155/validate-email-address-in-javascript */\r\n      var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n      return re.test( value );\r\n  },\r\n\r\n  length: function( value, jsonValue, min, max ){\r\n      if( !min )\r\n          min = 0;\r\n      if( !max )\r\n          max = Infinity;\r\n\r\n      return ( value.length >= min && value.length <= max );\r\n  },\r\n\r\n  integer: function( value, jsonValue, min, max ){\r\n      if( !min && min !== 0 )\r\n          min = -Infinity;\r\n      if( !max )\r\n          max = Infinity;\r\n\r\n      // Empty string passes the check\r\n      if(!value && value != 0)\r\n          return true;\r\n\r\n      var intVal = parseInt( value );\r\n\r\n      if( value != intVal )\r\n          return false;\r\n\r\n      return ( intVal <= max && intVal >= min );\r\n  },\r\n\r\n  checked: function( value ){\r\n      return value;\r\n  },\r\n\r\n  matches: function( value, jsonValue, path ){\r\n      return value == findInTree( path.split('.'), jsonValue );\r\n  }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n\tgetValidationError: function( value, jsonValue, validates ){\r\n\t\tvar methods = [],\r\n\t\t\terror = false,\r\n\t\t\ti = 0\r\n\t\t;\r\n\r\n\t\t// Store the validation methods in an array\r\n\t\tif( typeof validates == 'string' ){\r\n\t\t\tmethods = parseMethodString( validates );\r\n\t\t}\r\n\t\telse if( typeof validates == 'function' ){\r\n\t\t\tmethods = [ validates ];\r\n\t\t}\r\n\t\telse if( validates && validates.constructor === Array ){\r\n\t\t\tmethods = validates;\r\n\t\t}\r\n\r\n\r\n\t\tvar definition, f, method;\r\n\t\twhile( !error && i < methods.length ){\r\n\t\t\tmethod = methods[i++];\r\n\t\t\tif( typeof method == 'string' ){\r\n\r\n\t\t\t\t// definition {name, args}\r\n\t\t\t\tdefinition = parseMethodName( method );\r\n\t\t\t\tf = ValidationMethods[ definition.name ];\r\n\t\t\t\tif( !f )\r\n\t\t\t\t\tconsole.log( 'Unkown validation method ' + definition.name );\r\n\t\t\t\telse if( !f.apply( null, [ value, jsonValue ].concat( definition.args ) )){\r\n\t\t\t\t\terror = {\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tmethod: method\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if( typeof method == 'function' ){\r\n\t\t\t\tif( !method( value, jsonValue ) )\r\n\t\t\t\t\terror = {\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tmethod: 'custom'\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn error;\r\n\t}\r\n};\r\n\r\n/*\r\n HELPER METHODS\r\n */\r\n\r\nvar parseMethodString = function( string ){\r\n\treturn string.match(/[^\\s\\[]+(\\[[^\\]]+?\\])?/ig);\r\n};\r\n\r\n/**\r\n * Parse a method call in the data-validation attribute.\r\n * @param  {String} methodStr A method call like method[arg1, arg2, ...]\r\n * @return {Object}           An object like {name: 'method', args: [arg1, arg2, ...]}\r\n */\r\nvar parseMethodName = function( methodStr ){\r\n    var parts = methodStr.split('['),\r\n        definition = {\r\n            name: parts[0],\r\n            args: []\r\n        },\r\n        args\r\n    ;\r\n\r\n    if( parts.length > 1 ){\r\n        args = parts[1];\r\n\r\n        if( args[ args.length - 1 ] == ']' )\r\n            args = args.slice(0, args.length - 1);\r\n\r\n        definition.args = args.split(/\\s*,\\s*/);\r\n    }\r\n\r\n    return definition;\r\n};\r\n\r\n/**\r\n * Get the value of a field node, hiding the differences among\r\n * different type of inputs.\r\n *\r\n * @param  {DOMElement} field The field.\r\n * @return {String}       The current value of the given field.\r\n */\r\nvar getFieldValue = function( field ){\r\n    var tagName = field.tagName.toLowerCase();\r\n\r\n    if( tagName == 'input' && field.type == 'checkbox' ){\r\n        return field.checked;\r\n    }\r\n\r\n    if( tagName == 'select' ){\r\n        return field.options[field.selectedIndex].value;\r\n    }\r\n\r\n    return field.value;\r\n};\r\n\r\nfunction findInTree( path, jsonValue ){\r\n\tif( !path.length )\r\n\t\treturn jsonValue;\r\n\r\n\treturn findInTree(path.slice(1), jsonValue[ path[0] ]);\r\n}\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/validation.js\n ** module id = 8\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/validation.js?");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\r\n\r\nvar React = __webpack_require__(1),\r\n\tFieldAdder = __webpack_require__(10),\r\n\tassign = __webpack_require__(3)\r\n;\r\n\r\nmodule.exports = {\r\n\trenderHeader: function(){\r\n\t\tvar settingsHeader = this.props.settings.header;\r\n\t\tif( settingsHeader === false )\r\n\t\t\treturn '';\r\n\r\n\t\tvar type = typeof settingsHeader,\r\n\t\t\theader\r\n\t\t;\r\n\r\n\t\tif( type == 'function' ){\r\n\t\t\theader = settingsHeader( this.props.value.toJS() );\r\n\t\t}\r\n\t\telse if( type == 'undefined' ){\r\n\t\t\theader = this.getDefaultHeader();\r\n\t\t}\r\n\t\telse {\r\n\t\t\theader = settingsHeader;\r\n\t\t}\r\n\r\n\t\treturn React.DOM.span({ key: 's', onClick: this.toggleEditing, className: 'compoundToggle' }, header);\r\n\t},\r\n\r\n\ttoggleEditing: function(){\r\n\t\tif( this.state.editing != 'always' && this.props.settings.header !== false )\r\n\t\t\tthis.setState({editing: !this.state.editing});\r\n\t},\r\n\r\n\tcomponentWillReceiveProps: function( nextProps ){\r\n\t\tif( this.props.settings.editing != nextProps.settings.editing )\r\n\t\t\tthis.setState({ editing: nextProps.editing });\r\n\t},\r\n\r\n\trenderAdder: function( name ){\r\n\t\tvar settingsAdder = this.props.settings.adder,\r\n\t\t\ttype = typeof settingsAdder,\r\n\t\t\tadder\r\n\t\t;\r\n\r\n\t\tif( type == 'function' ){\r\n\t\t\tadder = settingsAdder( this.props.value.toJS() );\r\n\t\t}\r\n\t\telse if( settingsAdder === true || type == 'undefined' ){\r\n\t\t\tadder = this.getDefaultAdder();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tadder = settingsAdder;\r\n\t\t}\r\n\r\n\t\treturn React.createElement( FieldAdder, {\r\n\t\t\tonCreate: this.createField,\r\n\t\t\tname: name,\r\n\t\t\tkey: 'add',\r\n\t\t\ttext: adder\r\n\t\t});\r\n\t},\r\n\r\n\tcreateField: function( key, value, definition ){\r\n\r\n\t\tif( this.props.value[ key ] )\r\n\t\t\treturn console.log( 'Field ' + key + ' already exists.');\r\n\r\n\t\t// Start editing and focus\r\n\t\tdefinition.settings = {\r\n\t\t\tediting: this.state.editing == 'always' ? 'always' : true,\r\n\t\t\tfocus: true\r\n\t\t};\r\n\r\n\t\tvar fields = assign( {}, this.state.fields );\r\n\t\tfields[ key ] = definition;\r\n\r\n\t\tthis.setState({fields: fields});\r\n\t\tthis.props.value.set( key, value );\r\n\t},\r\n\r\n\t/**\r\n\t * Checks if the current key editing setting is true\r\n\t * and set it to false. The editing setting is set\r\n\t * to true when a new child is added to edit it automatically\r\n\t * after is edited it loses the point.\r\n\t *\r\n\t * @param  {String} key The child key\r\n\t */\r\n\tcheckEditingSetting: function( key ){\r\n\t\tvar fields = this.state.fields;\r\n\t\tif( fields[ key ] && fields[key].settings && fields[ key ].settings.focus === true ){\r\n\t\t\tfields = assign({}, fields);\r\n\t\t\tfields[key].settings.focus = false;\r\n\t\t\tthis.setState( {fields: fields} );\r\n\t\t}\r\n\t},\r\n\r\n\tgetFixedFields: function(){\r\n\t\tvar fields = this.props.settings.fixedFields,\r\n\t\t\tfixed = {}\r\n\t\t;\r\n\t\tif( fields && fields.constructor == Array ){\r\n\t\t\tfields.forEach( function( f ){\r\n\t\t\t\tfixed[ f ] = 1;\r\n\t\t\t});\r\n\t\t\treturn fixed;\r\n\t\t}\r\n\t\treturn fields;\r\n\t}\r\n};\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./mixins/CompoundFieldMixin.js\n ** module id = 9\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./mixins/CompoundFieldMixin.js?");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1),\r\n\tTypeField = __webpack_require__(4)\r\n;\r\n\r\n/**\r\n * Component to add fields to an Object or Array.\r\n * @param  {FreezerNode} root The parent to add the attribute.\r\n * @param  {string} name Optional. If provided, the attribute added will have that key (arrays).\r\n *                           Otherwise an input will be shown to let the user define the key.\r\n */\r\nvar FieldAdder = React.createClass({\r\n\tgetInitialState: function(){\r\n\t\treturn {\r\n\t\t\tcreating: this.props.creating || false,\r\n\t\t\tname: this.props.name,\r\n\t\t\ttype: 'string'\r\n\t\t};\r\n\t},\r\n\r\n\trender: function(){\r\n\t\tif( !this.state.creating )\r\n\t\t\treturn React.DOM.a({ className: 'jsonAdd', href: '#', onClick: this.handleCreate }, this.props.text );\r\n\r\n\t\tvar options = this.getTypes().map( function( type ){\r\n\t\t\t\treturn React.DOM.option({value: type, key: type}, type[0].toUpperCase() + type.slice(1));\r\n\t\t\t}),\r\n\t\t\tfieldName\r\n\t\t;\r\n\r\n\t\tif( typeof this.props.name != 'undefined' )\r\n\t\t\tfieldName =  [\r\n\t\t\t\tReact.DOM.span({className: 'jsonName'}, this.props.name),\r\n\t\t\t\tReact.DOM.span(null, ':')\r\n\t\t\t];\r\n\t\telse {\r\n\t\t\tfieldName = [\r\n\t\t\t\tReact.DOM.input({ref: 'keyInput', type: 'text', value: this.state.value, onChange: this.changeKey}),\r\n\t\t\t\tReact.DOM.span(null, ':')\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\treturn React.DOM.div( {className: 'jsonField jsonFieldAdder'}, [\r\n\t\t\tfieldName,\r\n\t\t\tReact.DOM.select({ key: 's', value: this.state.type, onChange: this.changeType, ref: 'typeSelector'}, options),\r\n\t\t\tReact.DOM.button({ key: 'b', onClick: this.createField }, 'OK' ),\r\n\t\t\tReact.DOM.a({ key: 'a', href: '#', className: 'cancelField', onClick: this.handleCancel}, 'Cancel')\r\n\t\t]);\r\n\t},\r\n\r\n\tcomponentDidUpdate: function( prevProps, prevState ){\r\n\t\tif( !prevState.creating && this.state.creating ){\r\n\t\t\tif( this.refs.keyInput )\r\n\t\t\t\tthis.refs.keyInput.getDOMNode().focus();\r\n\t\t\telse\r\n\t\t\t\tthis.refs.typeSelector.getDOMNode().focus();\r\n\t\t}\r\n\t},\r\n\r\n\tcomponentWillReceiveProps: function( newProps ){\r\n\t\tthis.setState({name: newProps.name});\r\n\t},\r\n\r\n\thandleCreate: function( e ){\r\n\t\te.preventDefault();\r\n\t\tthis.setState({creating: true});\r\n\t},\r\n\r\n\thandleCancel: function( e ){\r\n\t\te.preventDefault();\r\n\t\tthis.setState({creating: false});\r\n\t},\r\n\r\n\tchangeType: function( e ){\r\n\t\tthis.setState({type: e.target.value});\r\n\t},\r\n\r\n\tchangeKey: function( e ){\r\n\t\tthis.setState({name: e.target.value});\r\n\t},\r\n\r\n\tcreateField: function(){\r\n\t\tthis.setState({creating: false});\r\n\r\n\t\tvar value = TypeField.prototype.components[ this.state.type ].prototype.defaultValue;\r\n\r\n\t\tthis.props.onCreate( this.state.name, value, {type: this.state.type });\r\n\t},\r\n\r\n\tgetTypes: function(){\r\n\t\treturn Object.keys( TypeField.prototype.components );\r\n\t}\r\n});\r\n\r\nmodule.exports = FieldAdder;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/FieldAdder.js\n ** module id = 10\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/FieldAdder.js?");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\r\n\r\nvar React = __webpack_require__(1),\r\n\tField = __webpack_require__(7),\r\n\tassign = __webpack_require__(3),\r\n\tCompoundFieldMixin = __webpack_require__(9)\r\n;\r\n\r\n/**\r\n * Component for editing an array.\r\n * @param  {FreezerNode} value The value of the array.\r\n * @param  {Mixed} original The value of the component it the original json.\r\n */\r\nvar ArrayField = React.createClass({\r\n\tmixins: [CompoundFieldMixin],\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn this.getStateFromProps( this.props );\r\n\t},\r\n\r\n\tgetStateFromProps: function( props ){\r\n\t\treturn {\r\n\t\t\tediting: props.settings.editing || false,\r\n\t\t\tfields: this.state && this.state.fields || {}\r\n\t\t};\r\n\t},\r\n\r\n\tdefaultValue: [],\r\n\r\n\trender: function(){\r\n\t\tvar settings = this.props.settings,\r\n\t\t\tclassName = this.state.editing ? 'open jsonArray jsonCompound' : 'jsonArray jsonCompound',\r\n\t\t\topenArray = '',\r\n\t\t\tfixedFields = this.getFixedFields(),\r\n\t\t\tdefinitions = this.state.fields\r\n\t\t;\r\n\r\n\t\tvar attrs = [],\r\n\t\t\tdefinition, fixed\r\n\t\t;\r\n\t\tfor (var i = 0; i < this.props.value.length; i++) {\r\n\t\t\tdefinition = definitions[ i ] || {};\r\n\t\t\tif( !definition.settings )\r\n\t\t\t\tdefinition.settings = {};\r\n\r\n\t\t\tfixed = fixedFields === true || typeof fixedFields == 'object' && fixedFields[ i ];\r\n\r\n\t\t\tattrs.push( React.createElement( Field, {\r\n\t\t\t\tvalue: this.props.value[i],\r\n\t\t\t\tkey: i,\r\n\t\t\t\tname: i,\r\n\t\t\t\tid: this.props.id,\r\n\t\t\t\tdefinition: definition,\r\n\t\t\t\tfixed: fixed,\r\n\t\t\t\tonUpdated: this.updateField,\r\n\t\t\t\tonDeleted: this.deleteField,\r\n\t\t\t\tparentSettings: this.props.settings\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tvar openArrayChildren = [ attrs ];\r\n\t\tif( settings.adder !== false ){\r\n\t\t\topenArrayChildren.push( this.renderAdder( this.props.value.length ) );\r\n\t\t}\r\n\r\n\t\topenArray = React.DOM.div({ key:'o', className: 'jsonChildren' }, openArrayChildren );\r\n\r\n\t\treturn React.DOM.span({className: className}, [\r\n\t\t\tthis.renderHeader(),\r\n\t\t\topenArray\r\n\t\t]);\r\n\t},\r\n\r\n\tgetDefaultHeader: function(){\r\n\t\treturn 'List [' + this.props.value.length + ']';\r\n\t},\r\n\r\n\tgetDefaultAdder: function(){\r\n\t\treturn '+ Add element';\r\n\t},\r\n\r\n\tupdateField: function( key, value ){\r\n\t\tthis.checkEditingSetting( key );\r\n\t\tthis.props.value.set( key, value );\r\n\t},\r\n\r\n\tdeleteField: function( key ){\r\n\t\tvar fields = {};\r\n\r\n\t\tfor( var index in this.state.fields ){\r\n\t\t\tif( index > key ){\r\n\t\t\t\tfields[ index - 1 ] = this.state.fields[ index ];\r\n\t\t\t}\r\n\t\t\telse if( index < key ){\r\n\t\t\t\tfields[ index ] = this.state.fields[ index ];\r\n\t\t\t}\r\n\t\t\t// If they are equal we are deleting the element, do nothing\r\n\t\t}\r\n\r\n\t\tthis.props.value.splice( key, 1 );\r\n\t\tthis.setState( { fields: fields } );\r\n\t},\r\n\r\n\tisType: function( value ){\r\n\t\treturn value && value.constructor == Array;\r\n\t}\r\n});\r\n\r\nmodule.exports = ArrayField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/ArrayField.js\n ** module id = 11\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/ArrayField.js?");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1),\r\n\tLeafMixin = __webpack_require__(13)\r\n;\r\n\r\n\r\n/**\r\n * Component for editing a string.\r\n * @param  {string} value The value of the string.\r\n * @param  {Mixed} original The value of the component it the original json.\r\n * @param {FreezerNode} parent The parent node to let the string component update its value.\r\n */\r\nvar StringField = React.createClass({\r\n\tmixins: [LeafMixin],\r\n\ttypeClass: 'jsonString',\r\n\tinputType: 'text',\r\n\tdefaultValue: '',\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn this.getStateFromProps( this.props );\r\n\t},\r\n\r\n\trender: function(){\r\n\t\treturn this.renderInput();\r\n\t},\r\n\r\n\tupdateValue: function( e ){\r\n\t\tthis.setState({ value: e.target.value });\r\n\t},\r\n\r\n\tisType: function( value ){\r\n\t\treturn typeof value != 'object';\r\n\t}\r\n});\r\n\r\nmodule.exports = StringField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/StringField.js\n ** module id = 12\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/StringField.js?");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\r\n\r\nvar React = __webpack_require__(1);\r\n\r\nmodule.exports = {\r\n\tgetStateFromProps: function( props ){\r\n\t\treturn {\r\n\t\t\tediting: props.settings.editing || false,\r\n\t\t\tvalue: props.value\r\n\t\t};\r\n\t},\r\n\r\n\trenderInput: function(){\r\n\t\tvar className = this.typeClass;\r\n\r\n\t\tif( !this.state.editing )\r\n\t\t\treturn React.DOM.span( {onClick: this.setEditMode, className: className}, this.getDisplayString() );\r\n\r\n\t\treturn React.DOM.input({\r\n\t\t\ttype: this.inputType,\r\n\t\t\tvalue: this.state.value,\r\n\t\t\tid: this.props.id,\r\n\t\t\tplaceholder: this.props.settings.placeholder || '',\r\n\t\t\tonChange: this.updateValue,\r\n\t\t\tonBlur: this.setValue,\r\n\t\t\tref: 'input',\r\n\t\t\tonKeyDown: this.handleKeyDown\r\n\t\t});\r\n\t},\r\n\r\n\tgetDisplayString: function(){\r\n\t\tif( this.getDisplayModeString )\r\n\t\t\treturn this.getDisplayModeString();\r\n\r\n\t\tif( this.isEmpty() )\r\n\t\t\treturn React.DOM.span( {className: 'jsonNovalue'}, 'No value' );\r\n\r\n\t\treturn this.props.value;\r\n\t},\r\n\r\n\tcomponentWillReceiveProps: function( nextProps ){\r\n\t\tvar nextState = {},\r\n\t\t\tupdate = false\r\n\t\t;\r\n\r\n\t\tif( this.props.value != nextProps.value ){\r\n\t\t\tupdate = true;\r\n\t\t\tnextState.value = nextProps.value;\r\n\t\t}\r\n\t\tif( this.props.settings.editing != nextProps.settings.editing ){\r\n\t\t\tupdate = true;\r\n\t\t\tnextState.editing = nextProps.editing;\r\n\t\t}\r\n\t\tif( update )\r\n\t\t\tthis.setState( nextState );\r\n\t},\r\n\r\n\tcomponentDidUpdate: function( prevProps, prevState ){\r\n\t\tif( this.state.editing && ! prevState.editing || this.props.settings.focus ){\r\n\t\t\tthis.focus();\r\n\t\t}\r\n\t},\r\n\r\n\tcomponentDidMount: function(){\r\n\t\tif( this.state.editing === true || this.props.settings.focus )\r\n\t\t\tthis.focus();\r\n\t},\r\n\r\n\tsetEditMode: function(){\r\n\t\tthis.setState({editing: true});\r\n\t},\r\n\r\n\tsetValue: function(){\r\n\t\tif( this.state.editing != 'always' )\r\n\t\t\tthis.setState({editing: false});\r\n\t\tthis.props.onUpdated( this.state.value );\r\n\t},\r\n\r\n\ttoggleEditing: function(){\r\n\t\tthis.setState({ editing: !this.state.editing });\r\n\t},\r\n\r\n\thandleKeyDown: function( e ){\r\n\t\tif( e.which == 13 )\r\n\t\t\tthis.setValue();\r\n\t},\r\n\r\n\tfocus: function(){\r\n\t\tvar node = this.refs.input.getDOMNode();\r\n\t\tnode.focus();\r\n\t\tnode.value = node.value;\r\n\t},\r\n\r\n\tisEmpty:function(){\r\n\t\treturn this.props.value === undefined || this.props.value === '';\r\n\t},\r\n\r\n};\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./mixins/LeafFieldMixin.js\n ** module id = 13\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./mixins/LeafFieldMixin.js?");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1);\r\n\r\n/**\r\n * Component for editing a boolean.\r\n * @param  {string} value The value of the boolean.\r\n */\r\nvar BooleanField = React.createClass({\r\n\r\n\tdefaultValue: false,\r\n\r\n\trender: function(){\r\n\t\tvar className = 'jsonBoolean';\r\n\r\n\t\treturn React.DOM.input({\r\n\t\t\ttype: \"checkbox\",\r\n\t\t\tclassName: className,\r\n\t\t\tid: this.props.id,\r\n\t\t\tchecked: this.props.value,\r\n\t\t\tonChange: this.updateValue\r\n\t\t});\r\n\t},\r\n\r\n\tupdateValue: function( e ){\r\n\t\tthis.props.onUpdated( e.target.checked );\r\n\t},\r\n\r\n\tisType: function( value ){\r\n\t\treturn typeof value == 'boolean';\r\n\t},\r\n\r\n\tcomponentWillReceiveProps: function( nextProps ){\r\n\t\tif( this.props.value != nextProps.value )\r\n\t\t\tthis.setState( { value: nextProps.value } );\r\n\t}\r\n});\r\n\r\nmodule.exports = BooleanField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/BooleanField.js\n ** module id = 14\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/BooleanField.js?");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1),\r\n\tLeafMixin = __webpack_require__(13)\r\n;\r\n\r\n/**\r\n * Component for editing a number.\r\n * @param  {string} value The value of the string.\r\n * @param  {Mixed} original The value of the component it the original json.\r\n * @param {FreezerNode} parent The parent node to let the string component update its value.\r\n */\r\nvar NumberField = React.createClass({\r\n\tmixins: [LeafMixin],\r\n\ttypeClass: 'jsonNumber',\r\n\tinputType: 'number',\r\n\tdefaultValue: '',\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn this.getStateFromProps( this.props );\r\n\t},\r\n\r\n\trender: function(){\r\n\t\treturn this.renderInput();\r\n\t},\r\n\r\n\tupdateValue: function( e ){\r\n\t\tthis.setState({ value: parseFloat( e.target.value ) });\r\n\t},\r\n\r\n\tisType: function( value ){\r\n\t\treturn typeof value == 'number';\r\n\t}\r\n});\r\n\r\nmodule.exports = NumberField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/NumberField.js\n ** module id = 15\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/NumberField.js?");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1),\r\n\tLeafMixin = __webpack_require__(13)\r\n;\r\n\r\n/**\r\n * Component for editing a long string.\r\n * @param  {string} value The value of the string.\r\n * @param  {Mixed} original The value of the component it the original json.\r\n * @param {FreezerNode} parent The parent node to let the string component update its value.\r\n */\r\nvar TextField = React.createClass({\r\n\tmixins: [LeafMixin],\r\n\tdefaultValue: '',\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn this.getStateFromProps( this.props );\r\n\t},\r\n\r\n\trender: function(){\r\n\t\tvar className = 'jsonText';\r\n\r\n\t\tif( !this.state.editing )\r\n\t\t\treturn React.DOM.span( {onClick: this.setEditMode, className: className}, this.props.value );\r\n\r\n\t\treturn React.DOM.textarea({\r\n\t\t\tvalue: this.state.value,\r\n\t\t\tid: this.props.id,\r\n\t\t\tonChange: this.updateValue,\r\n\t\t\tplaceholder: this.props.settings.placeholder || '',\r\n\t\t\tonBlur: this.setValue,\r\n\t\t\tref: 'input'\r\n\t\t});\r\n\t},\r\n\r\n\tupdateValue: function( e ){\r\n\t\tthis.setState({ value: e.target.value });\r\n\t},\r\n\r\n\tisType: function( value ){\r\n\t\treturn typeof value == 'string' && value.length > 100;\r\n\t}\r\n});\r\n\r\nmodule.exports = TextField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/TextField.js\n ** module id = 16\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/TextField.js?");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1),\r\n\tLeafMixin = __webpack_require__(13)\r\n;\r\n\r\n\r\n/**\r\n * Component for editing a password.\r\n * @param  {string} value The value of the password.\r\n * @param  {Mixed} original The value of the component it the original json.\r\n * @param {FreezerNode} parent The parent node to let the password component update its value.\r\n */\r\nvar PasswordField = React.createClass({\r\n\tmixins: [LeafMixin],\r\n\ttypeClass: 'jsonPassword',\r\n\tinputType: 'password',\r\n\tdefaultValue: '',\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn this.getStateFromProps( this.props );\r\n\t},\r\n\r\n\trender: function(){\r\n\t\treturn this.renderInput();\r\n\t},\r\n\r\n\tgetDisplayModeString: function(){\r\n\t\treturn this.getWildcards();\r\n\t},\r\n\r\n\tgetWildcards: function(){\r\n\t\tvar out = '';\r\n\t\tfor (var i = this.state.value.length - 1; i >= 0; i--) {\r\n\t\t\tout += '*';\r\n\t\t}\r\n\t\treturn out;\r\n\t},\r\n\r\n\tisType: function(){\r\n\t\treturn false;\r\n\t},\r\n\r\n\tupdateValue: function( e ){\r\n\t\tthis.setState({ value: e.target.value });\r\n\t}\r\n});\r\n\r\nmodule.exports = PasswordField;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/PasswordField.js\n ** module id = 17\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/PasswordField.js?");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("var React = __webpack_require__(1);\r\n\r\n/**\r\n * Component for editing a boolean.\r\n * @param  {string} value The value of the boolean.\r\n */\r\nvar SelectType = React.createClass({\r\n\r\n\tdefaultValue: '',\r\n\r\n\tgetInitialState: function(){\r\n\t\treturn  {\r\n\t\t\tvalue: this.props.value\r\n\t\t};\r\n\t},\r\n\r\n\trender: function(){\r\n\t\tvar className = 'jsonSelect';\r\n\r\n\t\treturn React.DOM.select({\r\n\t\t\tclassName: className,\r\n\t\t\tid: this.props.id,\r\n\t\t\tvalue: this.props.value,\r\n\t\t\tonChange: this.updateValue\r\n\t\t}, this.renderOptions() );\r\n\t},\r\n\r\n\trenderOptions: function(){\r\n\t\tvar opts = this.props.settings.options,\r\n\t\t\toptions = []\r\n\t\t;\r\n\r\n\t\tif( !opts || !opts.length )\r\n\t\t\treturn options;\r\n\r\n\t\topts.forEach( function( opt ){\r\n\t\t\tvar data = opt;\r\n\t\t\tif( typeof opt != 'object' )\r\n\t\t\t\tdata = { value: opt, label: opt };\r\n\r\n\t\t\toptions.push(\r\n\t\t\t\tReact.DOM.option({value: data.value}, data.label)\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn options;\r\n\t},\r\n\r\n\tupdateValue: function( e ){\r\n\t\tthis.props.onUpdated( e.target.value );\r\n\t},\r\n\r\n\tcomponentWillReceiveProps: function( nextProps ){\r\n\t\tif( this.props.value != nextProps.value )\r\n\t\t\tthis.setState( { value: nextProps.value } );\r\n\t}\r\n});\r\n\r\nmodule.exports = SelectType;\r\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/types/SelectField.js\n ** module id = 18\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./src/types/SelectField.js?");

/***/ }
/******/ ])
});
;